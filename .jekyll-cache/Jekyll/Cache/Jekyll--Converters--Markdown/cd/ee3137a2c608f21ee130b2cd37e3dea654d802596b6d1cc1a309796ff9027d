I"Y<h2 id="introduction">Introduction</h2>

<p><a href="https://www.haskell.org/ghc/">GHC</a> is a wonderful <del>compiler</del> platform for writing compilers and languages on. In addition to Haskell offering convenient syntactical abstractions for writing domain-specific languages with, the language itself and the internals of the compiler can be extended in many ways, letting users come up with mind-bending innovations in <a href="http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf">scientific computing</a>, <a href="https://hackage.haskell.org/package/inspection-testing">testing</a> and <a href="https://haskellwingman.dev/">code editing</a>, among many other examples.</p>

<p>The compiler offers a <a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/extending_ghc.html#compiler-plugins">plugin system</a> that lets users customize various aspect of the syntax analysis, typechecking and compilation to imperative code, without having to rebuild the compiler itself.</p>

<p>While writing a GHC plugin that lets the user pinpoint a given declaration whose Core will be analyzed and transformed, I found myself in need of a specific bit of machinery: how can the user <em>tell</em> the compiler which expression to look for?</p>

<p>At the top level, we talk about binders (e.g. in <code class="language-plaintext highlighter-rouge">squared x = x * x</code> the function <code class="language-plaintext highlighter-rouge">\x -&gt; x * x</code> is said to be <em>bound</em> to the name <code class="language-plaintext highlighter-rouge">squared</code>), but the compiler uses a richer naming system internally. How to map user-facing terms to the internal representation used by the compiler?</p>

<p>It turns out <code class="language-plaintext highlighter-rouge">inspection-testing</code> provides this functionality as part of its user interface, and I will document it here both not to forget it and so that others might learn from it in the future.</p>

<h2 id="finding-the-name-of-declarations-with-template-haskell">Finding the <code class="language-plaintext highlighter-rouge">Name</code> of declarations with template Haskell</h2>

<p>A template-haskell <a href="https://hackage.haskell.org/package/template-haskell-2.17.0.0/docs/Language-Haskell-TH.html#t:Name"><code class="language-plaintext highlighter-rouge">Name</code></a> represents .. the name of declarations, expressions etc. in the syntax tree.</p>

<p>Resolving a top-level declaration into its <code class="language-plaintext highlighter-rouge">Name</code> requires a little bit of metaprogramming, enabled by the <code class="language-plaintext highlighter-rouge">{-# LANGUAGE TemplateHaskell #-}</code> extension. With that, we can use the special syntax with a single or double quote to refer to values or types respectively (made famous by <code class="language-plaintext highlighter-rouge">lens</code> in <a href="https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Combinators.html#v:makeLenses"><code class="language-plaintext highlighter-rouge">makeLenses</code></a> ‘‘Foo`).</p>

<h2 id="passing-names-to-later-stages-of-the-compilation-pipeline">Passing <code class="language-plaintext highlighter-rouge">Name</code>s to later stages of the compilation pipeline</h2>

<p>This is half of the trick: the <code class="language-plaintext highlighter-rouge">Name</code> we just found (and any other metadata that might be interesting to our plugin), is packed and serialized into a GHC <a href="http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/extending_ghc.html#source-annotations">ANNotation</a> via <a href="https://hackage.haskell.org/package/template-haskell-2.17.0.0/docs/Language-Haskell-TH-Syntax.html#v:liftData"><code class="language-plaintext highlighter-rouge">liftData</code></a>, which is inserted as a new top-level declaration by a template Haskell action (i.e. a function that returns in the <code class="language-plaintext highlighter-rouge">Q</code> monad).</p>

<p>Annotations can also be attached by the user to declarations, types and modules, but this method does so programmatically.</p>

<p>The resulting function has a type signature similar to this : <code class="language-plaintext highlighter-rouge">Name -&gt; Q [Dec]</code>, i.e. given a <code class="language-plaintext highlighter-rouge">Name</code> it will produce a list of new declarations <code class="language-plaintext highlighter-rouge">Dec</code> at compile time.</p>

<h2 id="picking-out-our-annotation-from-within-the-plugin">Picking out our annotation from within the plugin</h2>

<p>The other half of the trick takes place within the plugin. Here we are interested in the compiler phase that produces Core IR, so we’ll have to modify the <code class="language-plaintext highlighter-rouge">defaultPlugin</code> value provided by <code class="language-plaintext highlighter-rouge">ghc</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugin :: Plugin
plugin = defaultPlugin {
  installCoreToDos = install
  , pluginRecompile = \_ -&gt; pure NoForceRecompile
                       }
</code></pre></div></div>

<h2 id="credits">Credits</h2>

<p>First and foremost a big shout out to all the contributors to GHC who have built a truly remarkable piece of technology we can all enjoy, learn from and be productive with.</p>

<p>Of course, Joachim Breitner for devising and implementing <code class="language-plaintext highlighter-rouge">inspection-testing</code> [1]. I still remember the distinct feeling of my brain expanding against my skull after seeing his presentation at Zurihac 2017.</p>

<p>Next, I’d like to thank the good folks in the Haskell community for being kind and responsive even to my rather pedestrian questions on r/haskell, the ZuriHac discord server and stackoverflow. Li-yao Xia, Matthew Pickering, Daniel Diaz, David Feuer and others, thank you so much. Matthew has also written a paper [2] and curated a list of references for studying and developing GHC plugins , which I refer to extensively.</p>

<p>Mark Karpov deserves lots of credit too for writing an excellent reference on template Haskell [3] with lots of worked examples, go and check it out.</p>

<h2 id="references">References</h2>

<p>1) J. Breitner, <a href="https://github.com/nomeata/inspection-testing"><code class="language-plaintext highlighter-rouge">inspection-testing</code></a></p>

<p>2) M. Pickering et al, <a href="https://mpickering.github.io/papers/working-with-source-plugins.pdf">Working with source plugins</a></p>

<p>3) M. Karpov, <a href="https://markkarpov.com/tutorial/th.html">Template Haskell tutorial</a></p>
:ET