I"è<p align="center">
<img src="http://oi65.tinypic.com/jzjf3a.jpg" width="450" />
</p>

<h2 id="introduction">Introduction</h2>

<p>The annual ICFP contest ran between August 5 and August 8, 2016 and, even though I couldn‚Äôt fully commit to it due to an otherwise busy weekend, I resolved to tackling it in my spare time, using Haskell exclusively, in the course of the subsequent days. In this page I will document my solution process and tools, since the resulting application features quite a few techniques that are seldom explained together (parsing, plotting, geometric processing and combinatorial optimization).</p>

<p>Part 1 of this post will be concerned with representing the problem semantics, parsing with <code class="language-plaintext highlighter-rouge">attoparsec</code> and plotting with <code class="language-plaintext highlighter-rouge">diagrams</code>.</p>

<p>The <a href="https://icfpc2016.blogspot.se/2016/08/task-description.html">task description</a> can be found on the official blog, along with a few updates and the <a href="http://130.211.240.134/problem/list">problem list</a> (for which a free, anonymous registration is required).</p>

<h2 id="the-challenge">The Challenge</h2>

<p>In short: fold an origami.</p>

<p>The origami is defined as a list of coordinates defining the ‚Äúsilhouette‚Äù (contour of the folded origami) and segments joining them (folds or sheet edges, the ‚Äúskeleton‚Äù of the origami). The problem is: given an origami, and starting from a square sheet, find the list of folding moves (simple, or ‚Äúvalley-type‚Äù folds only are considered) to approximate the given origami silhouette.</p>

<h2 id="parsing-the-problem-specifications">Parsing the problem specifications</h2>

<p>The problems come as plain text files, of which the following is a typical example (Problem 26). I‚Äôve added some comments to clarify what the sections mean :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="mi">2</span>               <span class="c1">-- # of silhouettes</span>
<span class="mi">6</span>               <span class="c1">-- # of points of first silhouette</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span>           <span class="c1">-- list of point coordinates of first silhouette</span>
<span class="mi">3</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">8</span>         <span class="c1">-- ..      </span>
<span class="mi">3</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span> 
<span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="o">/</span><span class="mi">8</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="o">/</span><span class="mi">8</span>
<span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span>           <span class="c1">-- .. until here</span>
<span class="mi">4</span>               <span class="c1">-- # of points of second silhouette</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">8</span>         <span class="c1">-- list of point coordinates of second silhouette </span>
<span class="mi">1</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span>         <span class="c1">-- ..</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">8</span>
<span class="mi">10</span>              <span class="c1">-- # of segments</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span> <span class="mi">3</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">8</span>   <span class="c1">-- list of segment endpoint coordinates</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">8</span> <span class="mi">1</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="o">/</span><span class="mi">8</span> <span class="c1">-- ..</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span> <span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="o">/</span><span class="mi">8</span>
<span class="mi">3</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">8</span> <span class="mi">3</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span>
<span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span> <span class="mi">1</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="o">/</span><span class="mi">8</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">8</span> <span class="mi">3</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">8</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span>
<span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span> <span class="mi">3</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span>
<span class="mi">3</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="o">/</span><span class="mi">4</span> <span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="o">/</span><span class="mi">8</span>
<span class="mi">1</span><span class="o">/</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="o">/</span><span class="mi">8</span> <span class="mi">1</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="o">/</span><span class="mi">8</span></code></pre></figure>

<p>All coordinates are specified as integers or ratios of integers, and should be manipulated as such (which is sensible because we can operate on them without loss of numerical precision, as opposed to manipulating floats).</p>

<p>We immediately notice the need for some sort of conditional parsing: the first line specifies an integer <code class="language-plaintext highlighter-rouge">n</code>, which determines how many ‚ÄúSilhouette‚Äù stanzas will follow. The last section is the ‚ÄúSkeleton‚Äù, i.e. the complete set of segments that form the ‚Äúx-ray‚Äù picture of the folded origami.</p>

<p>If you want to reproduce, create a new project e.g. with <code class="language-plaintext highlighter-rouge">stack new</code> and put the following in the <code class="language-plaintext highlighter-rouge">Lib</code> module.</p>

<p>First, the requisite boilerplate:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">import</span> <span class="nn">Data.Attoparsec.Internal.Types</span> <span class="p">(</span><span class="kt">Parser</span><span class="p">)</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.Attoparsec.ByteString</span> <span class="k">as</span> <span class="n">PB</span>
<span class="kr">import</span> <span class="nn">Data.Attoparsec.ByteString.Char8</span> <span class="p">(</span><span class="nf">decimal</span><span class="p">,</span> <span class="nf">signed</span><span class="p">,</span> <span class="nf">scientific</span><span class="p">,</span> <span class="nf">digit</span><span class="p">,</span> <span class="nf">number</span><span class="p">,</span> <span class="nf">rational</span><span class="p">,</span> <span class="nf">char</span><span class="p">,</span> <span class="nf">char8</span><span class="p">,</span> <span class="nf">endOfLine</span><span class="p">,</span> <span class="nf">endOfInput</span><span class="p">,</span> <span class="nf">isDigit</span><span class="p">,</span> <span class="nf">isDigit_w8</span><span class="p">,</span> <span class="nf">isEndOfLine</span><span class="p">,</span> <span class="nf">isHorizontalSpace</span><span class="p">)</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Data.ByteString</span> <span class="k">as</span> <span class="n">B</span> <span class="p">(</span><span class="kt">ByteString</span><span class="p">,</span> <span class="n">readFile</span><span class="p">)</span>

<span class="kr">import</span> <span class="nn">System.FilePath</span></code></pre></figure>

<p>Now, let‚Äôs encode the problem specification semantics in some types :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">data</span> <span class="kt">Fract</span> <span class="o">=</span> <span class="kt">Fract</span> <span class="o">!</span><span class="kt">Int</span> <span class="o">!</span><span class="kt">Int</span>
<span class="kr">instance</span> <span class="kt">Eq</span> <span class="kt">Fract</span> <span class="kr">where</span>
  <span class="n">f1</span> <span class="o">==</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">ratSimp</span> <span class="n">f1</span> <span class="o">==</span> <span class="n">ratSimp</span> <span class="n">f2</span>

<span class="n">ratSimp</span> <span class="o">::</span> <span class="kt">Fractional</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="kt">Fract</span> <span class="o">-&gt;</span> <span class="n">a</span>
<span class="n">ratSimp</span> <span class="p">(</span><span class="kt">Fract</span> <span class="n">n</span> <span class="n">d</span><span class="p">)</span> <span class="o">=</span> <span class="n">fromIntegral</span> <span class="n">n</span> <span class="o">/</span> <span class="n">fromIntegral</span> <span class="n">d</span></code></pre></figure>

<p>Equality of rationals is established by reducing the fraction; the result is in general not an integer. This method is faster than relying on <code class="language-plaintext highlighter-rouge">gcd</code> and simplifying, it seems, but we‚Äôll use it only here and for producing plots (not in the solver logic).</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">data</span> <span class="kt">Point</span> <span class="o">=</span> <span class="kt">P</span> <span class="kt">Fract</span> <span class="kt">Fract</span> <span class="kr">deriving</span> <span class="kt">Eq</span>

<span class="kr">data</span> <span class="kt">Segment</span> <span class="o">=</span> <span class="kt">S</span> <span class="kt">Point</span> <span class="kt">Point</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Eq</span><span class="p">,</span> <span class="kt">Show</span><span class="p">)</span>

<span class="kr">data</span> <span class="kt">Silhouette</span> <span class="o">=</span>
  <span class="kt">Silhouette</span> <span class="p">{</span> <span class="n">numVerticesPoly</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">,</span>
               <span class="n">points</span> <span class="o">::</span> <span class="p">[</span><span class="kt">Point</span><span class="p">]</span>  <span class="p">}</span> <span class="kr">deriving</span> <span class="kt">Eq</span>

<span class="kr">data</span> <span class="kt">Skeleton</span> <span class="o">=</span>
  <span class="kt">Skeleton</span> <span class="p">{</span> <span class="n">numSegments</span> <span class="o">::</span> <span class="kt">Int</span><span class="p">,</span>
             <span class="n">segments</span> <span class="o">::</span> <span class="p">[</span><span class="kt">Segment</span><span class="p">]}</span> <span class="kr">deriving</span> <span class="kt">Eq</span>

<span class="kr">data</span> <span class="kt">Problem</span> <span class="o">=</span> <span class="kt">Problem</span> <span class="p">[</span><span class="kt">Silhouette</span><span class="p">]</span> <span class="kt">Skeleton</span> <span class="kr">deriving</span> <span class="kt">Eq</span></code></pre></figure>

<p>For parsing the specification, we rely on the amazing <code class="language-plaintext highlighter-rouge">attoparsec</code> package. I import its ByteString module in qualified form as <code class="language-plaintext highlighter-rouge">PB</code> to make it easier to follow.</p>

<p>We switch alternatively between applicative and <code class="language-plaintext highlighter-rouge">do</code>-based notation. Anyway, <a href="https://hackage.haskell.org/package/base-4.9.0.0/docs/src/GHC.Base.html#Monad">since GHC 8, <code class="language-plaintext highlighter-rouge">Monad</code>s are indeed <code class="language-plaintext highlighter-rouge">Applicative</code>s</a>, so whatever logic one writes in the latter form automatically applies to the former.</p>

<p>Small reminder about the operators: <code class="language-plaintext highlighter-rouge">(&lt;$&gt;) :: Functor f =&gt; (a -&gt; b) -&gt; f a -&gt; f b</code> is a synonym for <code class="language-plaintext highlighter-rouge">fmap</code>, <code class="language-plaintext highlighter-rouge">(&lt;*&gt;) :: Applicative f =&gt; f (a -&gt; b) -&gt; f a -&gt; f b</code> (read ‚Äúapply‚Äù) is the function defining the Applicative class (‚Äúevaluate a function with a value if both are wrapped in a context‚Äù), whereas <code class="language-plaintext highlighter-rouge">(*&gt;) :: Applicative f =&gt; f a -&gt; f b -&gt; f b</code> and <code class="language-plaintext highlighter-rouge">(&lt;*) :: Applicative f =&gt; f a -&gt; f b -&gt; f a</code> can be read as ‚Äúsequence‚Äù, i.e. they perform both actions that appear as their arguments and retain the second and first results, respectively.</p>

<p>The following declarations establish the rules for parsing signed fractional values (optionally integers, i.e. fractionals with 1 at the denominator, using the <code class="language-plaintext highlighter-rouge">option</code> modifier), then <code class="language-plaintext highlighter-rouge">Point</code>s and <code class="language-plaintext highlighter-rouge">Segment</code>s based on those.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">parseFractional</span> <span class="o">::</span> <span class="kt">Parser</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="kt">Fract</span>
<span class="n">parseFractional</span> <span class="o">=</span>
  <span class="kt">Fract</span> <span class="o">&lt;$&gt;</span> <span class="n">signed</span> <span class="n">decimal</span> <span class="o">&lt;*&gt;</span> <span class="kt">PB</span><span class="o">.</span><span class="n">option</span> <span class="mi">1</span> <span class="p">(</span><span class="n">char8</span> <span class="sc">'/'</span> <span class="o">*&gt;</span> <span class="n">decimal</span><span class="p">)</span>

<span class="n">parsePoint</span> <span class="o">::</span> <span class="kt">Parser</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="kt">Point</span>
<span class="n">parsePoint</span> <span class="o">=</span> <span class="kt">P</span> <span class="o">&lt;$&gt;</span> <span class="p">(</span><span class="n">parseFractional</span> <span class="o">&lt;*</span> <span class="n">comma</span><span class="p">)</span> <span class="o">&lt;*&gt;</span> <span class="n">parseFractional</span>

<span class="n">parseSegment</span> <span class="o">::</span> <span class="kt">Parser</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="kt">Segment</span>
<span class="n">parseSegment</span> <span class="o">=</span> <span class="kt">S</span> <span class="o">&lt;$&gt;</span> <span class="p">(</span><span class="n">parsePoint</span> <span class="o">&lt;*</span> <span class="n">space</span><span class="p">)</span> <span class="o">&lt;*&gt;</span> <span class="n">parsePoint</span>

<span class="n">comma</span> <span class="o">=</span> <span class="n">char8</span> <span class="sc">','</span>
<span class="n">space</span> <span class="o">=</span> <span class="n">char8</span> <span class="sc">' '</span></code></pre></figure>

<p>Next, we‚Äôll need some parsing logic for the various sections of the specification file:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">parseNumPolys</span> <span class="o">::</span> <span class="kt">Parser</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="kt">Int</span>
<span class="n">parseNumPolys</span> <span class="o">=</span> <span class="n">decimal</span> <span class="o">&lt;*</span> <span class="n">endOfLine</span>

<span class="n">parseSilhouette</span> <span class="o">::</span> <span class="kt">Parser</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="kt">Silhouette</span>
<span class="n">parseSilhouette</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">nvp</span> <span class="o">&lt;-</span> <span class="n">decimal</span> <span class="o">&lt;*</span> <span class="n">endOfLine</span>
  <span class="n">pp</span> <span class="o">&lt;-</span> <span class="kt">PB</span><span class="o">.</span><span class="n">many1</span> <span class="p">(</span><span class="n">parsePoint</span> <span class="o">&lt;*</span> <span class="n">endOfLine</span><span class="p">)</span>
  <span class="n">return</span> <span class="o">$</span> <span class="kt">Silhouette</span> <span class="n">nvp</span> <span class="n">pp</span>

<span class="n">parseSkeleton</span> <span class="o">::</span> <span class="kt">Parser</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="kt">Skeleton</span>
<span class="n">parseSkeleton</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">ns</span> <span class="o">&lt;-</span> <span class="n">decimal</span> <span class="o">&lt;*</span> <span class="n">endOfLine</span>
  <span class="n">segs</span> <span class="o">&lt;-</span> <span class="kt">PB</span><span class="o">.</span><span class="n">many1</span> <span class="p">(</span><span class="n">parseSegment</span> <span class="o">&lt;*</span> <span class="n">endOfLine</span><span class="p">)</span>
  <span class="n">return</span> <span class="o">$</span> <span class="kt">Skeleton</span> <span class="n">ns</span> <span class="n">segs</span></code></pre></figure>

<p>Notice how easily we can compose elementary parsers into more complex ones. The <code class="language-plaintext highlighter-rouge">parseProblem0</code> function reflects the problem specification structure 1:1. Neat!</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">parseProblem0</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Parser</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="kt">Problem</span>
<span class="n">parseProblem0</span> <span class="n">n</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="kr">_</span> <span class="o">&lt;-</span> <span class="n">decimal</span> <span class="o">*&gt;</span> <span class="n">endOfLine</span>
  <span class="n">sils</span> <span class="o">&lt;-</span> <span class="kt">PB</span><span class="o">.</span><span class="n">count</span> <span class="n">n</span> <span class="n">parseSilhouette</span>
  <span class="n">skels</span> <span class="o">&lt;-</span> <span class="n">parseSkeleton</span> <span class="o">&lt;*</span> <span class="n">endOfInput</span>
  <span class="n">return</span> <span class="o">$</span> <span class="kt">Problem</span> <span class="n">sils</span> <span class="n">skels</span></code></pre></figure>

<p>or, equivalently,</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">parseProblem0'</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">Parser</span> <span class="kt">B</span><span class="o">.</span><span class="kt">ByteString</span> <span class="kt">Problem</span>
<span class="n">parseProblem0'</span> <span class="n">n</span> <span class="o">=</span>
  <span class="kt">Problem</span> <span class="o">&lt;$&gt;</span>
     <span class="p">(</span><span class="n">decimal</span> <span class="o">*&gt;</span> <span class="n">endOfLine</span> <span class="o">*&gt;</span> <span class="kt">PB</span><span class="o">.</span><span class="n">count</span> <span class="n">n</span> <span class="n">parseSilhouette</span><span class="p">)</span> <span class="o">&lt;*&gt;</span>
     <span class="p">(</span><span class="n">parseSkeleton</span> <span class="o">&lt;*</span> <span class="n">endOfInput</span><span class="p">)</span></code></pre></figure>

<p>Next: the implementation of conditional parsing: there is probably a more concise way to say this, but the idea is simple: we must first parse and acquire an integer appearing at the beginning of the file, and with that decide how many times to apply the <code class="language-plaintext highlighter-rouge">Silhouette</code> parser (using the <code class="language-plaintext highlighter-rouge">count :: Monad m =&gt; Int -&gt; m a -&gt; m [a]</code> modifier).</p>

<p>If parsing succeeds (i.e. our parsers match the structure of the file), the resulting <code class="language-plaintext highlighter-rouge">Problem</code> datastructure will be returned (wrapped in a <code class="language-plaintext highlighter-rouge">Right</code> constructor).</p>

<p>N.B. the <a href="https://hackage.haskell.org/package/base-4.9.0.0/docs/src/Data.Either.html#line-136"><code class="language-plaintext highlighter-rouge">Monad</code> instance of <code class="language-plaintext highlighter-rouge">Either</code></a> returns the first <code class="language-plaintext highlighter-rouge">Left a</code> value it encounters, in this case a <code class="language-plaintext highlighter-rouge">String</code> with the error message.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">loadProblem</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Either</span> <span class="kt">String</span> <span class="kt">Problem</span><span class="p">)</span>
<span class="n">loadProblem</span> <span class="n">n</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">c</span> <span class="o">&lt;-</span> <span class="kt">B</span><span class="o">.</span><span class="n">readFile</span> <span class="n">fname</span>
  <span class="kr">let</span> <span class="n">r</span> <span class="o">=</span> <span class="kt">PB</span><span class="o">.</span><span class="n">parseOnly</span> <span class="n">parseNumPolys</span> <span class="n">c</span>
  <span class="kr">case</span> <span class="n">r</span> <span class="kr">of</span>
    <span class="kt">Left</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">error</span> <span class="n">e</span>
    <span class="kt">Right</span> <span class="n">numpolys</span> <span class="o">-&gt;</span> 
      <span class="n">return</span> <span class="o">$</span> <span class="kt">PB</span><span class="o">.</span><span class="n">parseOnly</span> <span class="p">(</span><span class="n">parseProblem0</span> <span class="n">numpolys</span><span class="p">)</span> <span class="n">c</span>
  <span class="kr">where</span>
     <span class="n">dir</span> <span class="o">=</span> <span class="s">"problems/"</span>
     <span class="n">fname</span> <span class="o">=</span> <span class="n">dir</span> <span class="o">&lt;/&gt;</span> <span class="n">show</span> <span class="n">n</span></code></pre></figure>

<h2 id="drawing-origami">Drawing origami</h2>

<p>Next, we‚Äôll see how to plot our data; for this I‚Äôll use the equally amazing <code class="language-plaintext highlighter-rouge">diagrams</code> package. It is pretty extensive however it also comes with an excellent set of <a href="http://projects.haskell.org/diagrams/tutorials.html">tutorials</a>.</p>

<p>The following goes in a <code class="language-plaintext highlighter-rouge">Diag</code> module that imports our <code class="language-plaintext highlighter-rouge">Lib</code>.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">import</span> <span class="nn">Diagrams.Prelude</span> <span class="k">hiding</span> <span class="p">(</span><span class="kt">P</span><span class="p">,</span> <span class="p">(</span><span class="o">&lt;&gt;</span><span class="p">))</span>
<span class="kr">import</span> <span class="nn">Diagrams.Backend.SVG.CmdLine</span>
<span class="kr">import</span> <span class="nn">Diagrams.Backend.CmdLine</span>

<span class="kr">import</span> <span class="nn">Data.Monoid</span> <span class="p">((</span><span class="o">&lt;&gt;</span><span class="p">))</span>
<span class="kr">import</span> <span class="nn">System.Environment</span> <span class="p">(</span><span class="nf">getArgs</span><span class="p">)</span>

<span class="kr">import</span> <span class="nn">Lib</span> <span class="k">hiding</span> <span class="p">(</span><span class="nf">p2</span><span class="p">)</span></code></pre></figure>

<h3 id="from-parsing-to-plotting">From parsing to plotting</h3>

<p>First, some helper functions to convert between our <code class="language-plaintext highlighter-rouge">Problem</code> record fields and the <code class="language-plaintext highlighter-rouge">diagrams</code> types:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">pointToP2</span> <span class="o">::</span> <span class="kt">Lib</span><span class="o">.</span><span class="kt">Point</span> <span class="o">-&gt;</span> <span class="kt">P2</span> <span class="kt">Double</span>
<span class="n">pointToP2</span> <span class="p">(</span><span class="kt">Lib</span><span class="o">.</span><span class="kt">P</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">p2</span> <span class="p">(</span><span class="n">ratSimp</span> <span class="n">x</span><span class="p">,</span> <span class="n">ratSimp</span> <span class="n">y</span><span class="p">)</span>

<span class="n">pointsToTrail</span> <span class="o">::</span> <span class="p">[</span><span class="kt">Lib</span><span class="o">.</span><span class="kt">Point</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">Trail</span> <span class="kt">V2</span> <span class="kt">Double</span>
<span class="n">pointsToTrail</span> <span class="o">=</span>  <span class="n">closeTrail</span> <span class="o">.</span> <span class="n">trailFromVertices</span> <span class="o">.</span> <span class="n">map</span> <span class="n">pointToP2</span>

<span class="n">segmentToPath</span> <span class="o">::</span> <span class="kt">Lib</span><span class="o">.</span><span class="kt">Segment</span> <span class="o">-&gt;</span> <span class="kt">Path</span> <span class="kt">V2</span> <span class="kt">Double</span>
<span class="n">segmentToPath</span> <span class="p">(</span><span class="kt">S</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span>  <span class="o">=</span> <span class="n">pointToP2</span> <span class="n">x</span> <span class="o">~~</span> <span class="n">pointToP2</span> <span class="n">y</span> <span class="o">::</span> <span class="kt">Path</span> <span class="kt">V2</span> <span class="kt">Double</span></code></pre></figure>

<p>Both the <code class="language-plaintext highlighter-rouge">Trail</code> and <code class="language-plaintext highlighter-rouge">Path</code> types are instances of the internal <code class="language-plaintext highlighter-rouge">ToPath</code> class (which later will let us convert them to a <code class="language-plaintext highlighter-rouge">Diagram</code> in order to be drawn). Most importantly, a <code class="language-plaintext highlighter-rouge">Path</code> is not necessarily continuous, whereas a <code class="language-plaintext highlighter-rouge">Trail</code> is assumed to connect the dots.</p>

<p>We use the <code class="language-plaintext highlighter-rouge">closeTrail</code> function to render all the sides of the Silhouette polygon since in the dataset the last point in an array doesn‚Äôt usually coincide with the starting one.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">silhouetteToDiagram</span> <span class="o">::</span> <span class="kt">Foldable</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="n">t</span> <span class="p">[</span><span class="kt">Lib</span><span class="o">.</span><span class="kt">Point</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">Diagram</span> <span class="kt">B</span>
<span class="n">silhouetteToDiagram</span> <span class="o">=</span> <span class="n">strokeTrail</span> <span class="o">.</span> <span class="n">foldMap</span> <span class="n">pointsToTrail</span> 

<span class="n">skeletonToDiagram</span> <span class="o">::</span> <span class="kt">Foldable</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="n">t</span> <span class="kt">Lib</span><span class="o">.</span><span class="kt">Segment</span> <span class="o">-&gt;</span> <span class="kt">Diagram</span> <span class="kt">B</span>
<span class="n">skeletonToDiagram</span> <span class="o">=</span> <span class="n">stroke</span> <span class="o">.</span> <span class="n">foldMap</span> <span class="n">segmentToPath</span></code></pre></figure>

<p>The two functions above subsume summarize all the conversion work between <code class="language-plaintext highlighter-rouge">Lib</code> and <code class="language-plaintext highlighter-rouge">diagrams</code>.</p>

<h3 id="diagrams-are-monoids">Diagrams are <code class="language-plaintext highlighter-rouge">Monoid</code>s</h3>

<p>Diagrams are instances of <code class="language-plaintext highlighter-rouge">Monoid</code>, so <code class="language-plaintext highlighter-rouge">mappend</code>ing them will yield another Diagram. NB: <code class="language-plaintext highlighter-rouge">mconcat :: Monoid a =&gt; [a] -&gt; a</code> is equivalent to <code class="language-plaintext highlighter-rouge">mappend</code>ing a list of monoidal values together into a single one.</p>

<p>The next function demonstrates this and also applies some graphical styles to the diagrams (line and filling colors):</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">diagTot</span> <span class="o">::</span> <span class="kt">Problem</span> <span class="o">-&gt;</span> <span class="kt">Diagram</span> <span class="kt">B</span>
<span class="n">diagTot</span> <span class="n">p</span> <span class="o">=</span>
  <span class="n">centerXY</span> <span class="o">$</span> <span class="n">mconcat</span> <span class="p">[</span>
      <span class="p">(</span><span class="n">dashingG</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span><span class="mf">0.005</span><span class="p">]</span> <span class="mi">0</span> <span class="o">.</span> <span class="n">lc</span> <span class="n">red</span><span class="p">)</span> <span class="n">skeletonToDiagram</span> <span class="o">$</span> <span class="n">problemSegments</span> <span class="n">p</span>
    <span class="p">,</span> <span class="p">(</span><span class="n">lc</span> <span class="n">black</span> <span class="o">#</span> <span class="n">fc</span> <span class="n">yellow</span><span class="p">)</span> <span class="n">silhouetteToDiagram</span> <span class="o">$</span> <span class="n">problemPoints</span> <span class="n">p</span>
    <span class="p">]</span></code></pre></figure>

<p>The only <code class="language-plaintext highlighter-rouge">IO</code> required by this program : the Diagrams <code class="language-plaintext highlighter-rouge">mainWith</code> function is <a href="http://projects.haskell.org/diagrams/doc/cmdline.html">very versatile</a> but here we simply use it to wrap the file loading <code class="language-plaintext highlighter-rouge">IO</code>, to supply the problem number from command line when the program is run.</p>

<p>There are many possibilities for extending the command line input with structured options processing via <code class="language-plaintext highlighter-rouge">optparse-applicative</code>, but we don‚Äôt need all of that complexity here.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">main</span> <span class="o">::</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">main</span> <span class="o">=</span> <span class="n">mainWith</span> <span class="n">loadProblemN</span>

<span class="n">loadProblemN</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="p">(</span><span class="kt">Diagram</span> <span class="kt">B</span><span class="p">)</span>
<span class="n">loadProblemN</span> <span class="n">n</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">r</span> <span class="o">&lt;-</span> <span class="n">loadProblem</span> <span class="n">n</span>
  <span class="kr">case</span> <span class="n">r</span> <span class="kr">of</span> <span class="kt">Left</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="n">error</span> <span class="n">e</span>
            <span class="kt">Right</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">return</span> <span class="o">$</span> <span class="n">diagTot</span> <span class="n">p</span></code></pre></figure>

<p>And that‚Äôs it really!</p>

<p>At this point we can <code class="language-plaintext highlighter-rouge">stack build</code> and, if the Cabal file defines an executable called <code class="language-plaintext highlighter-rouge">viz</code> that points to the <code class="language-plaintext highlighter-rouge">Diag</code> module it its <code class="language-plaintext highlighter-rouge">main-is</code>, calling <code class="language-plaintext highlighter-rouge">stack exec viz -- -o viz.svg -w 600 101</code> will render an SVG file of the given width (600 pixels) using the problem specification # 101 (the figure at the top of the page).</p>

<p>This post is already long enough so I‚Äôll close it here, though there are still a couple of kinks to iron in the data preprocessing.</p>

<p>Stay tuned for Part 2, with the solver logic !</p>
:ET