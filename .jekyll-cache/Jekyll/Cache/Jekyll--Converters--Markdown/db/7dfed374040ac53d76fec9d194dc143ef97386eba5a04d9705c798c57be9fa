I"gâ<ul>
  <li><a href="#intro">Introduction</a></li>
  <li><a href="#overview">The interactive Haskell compiler</a></li>
  <li><a href="#lambda">Notation for functional programs</a></li>
  <li><a href="#io">Defining new symbols, functions and modules</a></li>
  <li><a href="#pattern">Pattern matching</a></li>
  <li><a href="#data">Datatypes</a></li>
</ul>

<p><a id="intro"></a> &lt;/a&gt;</p>
<h2 id="introduction">Introduction</h2>

<p>The aim of this tutorial is to help develop a working knowledge of functional programming using Haskell as the vessel language; this turns out to require one to digest a certain number of new ideas, and to get acquainted with the terminology to describe them.</p>

<p>Most of these concepts are intertwined, so perhaps they make little sense if considered in isolation. This has traditionally given Haskell a bad reputation for displaying a steep learning curve and being ‚Äútoo abstract‚Äù. We wish to demistify this, by showing how <em>programming with functions</em> is a natural way of expressing computer programs.</p>

<p>Luckily, Haskell comes with an interactive compiler as well (GHCi), and this lets us explore more or less separately the various features of the language.</p>

<p><a id="overview"></a> &lt;/a&gt;</p>
<h2 id="the-interactive-haskell-compiler-ghci">The interactive Haskell compiler, GHCi</h2>

<p>In the following we will see an example interactive session with GHCi, to familiarize the reader with the notation and some fundamental concepts of the language. Some familiarity with programming concepts and mathematical notation is required, but the tutorial is intended to be as self-contained as possible (All feedback is very welcome!).</p>

<p>The <code class="language-plaintext highlighter-rouge">&gt;</code>character at the start of a line indicates the interpreter prompt, whereas <code class="language-plaintext highlighter-rouge">:t</code> is the GHCi macro for requesting the <em>type</em> of an expression.</p>

<p>If we input an expression that already has a value associated, GHCi computes and prints the expression value on the next line.
If, on the other hand, we ask for the type of an expression <code class="language-plaintext highlighter-rouge">x</code> with <code class="language-plaintext highlighter-rouge">:t x</code>, the interpreter outputs this after a double colon.</p>

<p>N.B.: In function bodies, parentheses are used to group subexpressions that must be evaluated first (as per convention).</p>

<p>Haskell is case sensitive and often indentation-sensitive too, so watch out :)</p>

<p>Each example builds on the previous one, starting from self-explanatory concepts; 
the reader is encouraged to install the latest version of the <a href="http://www.haskell.org/ghc">Glasgow Haskell Compiler suite</a> suite and try/modify the examples, in the given order; it‚Äôs much more fun and instructive than just reading through!</p>

<p>For those in a hurry, <a href="http://ghc.io">ghc.io</a> provides a ‚Äúsafe‚Äù Haskell prompt to e.g. try out one-liners. Longer code can be developed (after a free signup) on <a href="https://www.fpcomplete.com/business/fp-haskell-center/">FPComplete Haskell Center</a>.</p>

<hr />
<h1 id="first-steps-with-ghci">First steps with GHCi</h1>

<p>Starting from the very basics :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span>
<span class="mi">3</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="mi">1</span>
<span class="mi">1</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span></code></pre></figure>

<p>The two interactions above show an <em>evaluation</em> and a <em>type query</em>, respectively. The former, being a constant expression, evaluates directly to its result (no surprises here), whereas the latter could be understood as ‚ÄúWhat is the type of <code class="language-plaintext highlighter-rouge">1</code>?‚Äù ‚ÄúThe type of <code class="language-plaintext highlighter-rouge">1</code> is <code class="language-plaintext highlighter-rouge">a</code>, such that <code class="language-plaintext highlighter-rouge">a</code> is an instance of a numerical type (i.e. a number).‚Äù</p>

<p>The actual letter indicating a type in a signature, like <code class="language-plaintext highlighter-rouge">a</code> in the previous example, does not matter; distinct letters correspond to different types.</p>

<blockquote>
  <p>Why is the type signature of something as simple as a number so verbose? 
Because many things have number-like properties (can be counted, added, subtracted etc.): potatoes, firemen, structs containing arrays of CSV files, etc.</p>
</blockquote>

<blockquote>
  <p>If a type is an ‚Äúinstance‚Äù of a typeclass such as <code class="language-plaintext highlighter-rouge">Num</code>, the corresponding functions to operate ‚Äúnumerically‚Äù, e.g. sum, product, absolute value etc., can be used on data objects belonging to it. Equivalently, by making it an instance of <code class="language-plaintext highlighter-rouge">Num</code>, we have ‚Äústapled‚Äù additional numerical functionality onto our type. More about this deep idea in the next sections.</p>
</blockquote>

<p>Let‚Äôs interact some more with the interpreter and see what happens:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">pi</span>
<span class="n">pi</span> <span class="o">::</span> <span class="kt">Floating</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="n">pi</span>
<span class="mf">3.141592653589793</span>

<span class="o">&gt;</span> <span class="n">exp</span> <span class="mi">1</span>
<span class="mf">2.718281828459045</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">exp</span>
<span class="n">exp</span> <span class="o">::</span> <span class="kt">Floating</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span></code></pre></figure>

<p>The exponential <code class="language-plaintext highlighter-rouge">exp</code> is a function of a single parameter (a real number, here represented as a <code class="language-plaintext highlighter-rouge">Floating</code> point value): \(y(x) = e ^ x,\; x,y \in \mathbb{R}\)</p>

<blockquote>
  <p>Why <code class="language-plaintext highlighter-rouge">Floating a</code> and not <code class="language-plaintext highlighter-rouge">Num a</code>, for instance? Because <code class="language-plaintext highlighter-rouge">Num</code> is the most general typeclass of numbers (i.e including fractionals, integers, floats etc.), but transcendental numbers (i.e. having infinite decimal digits) such as <code class="language-plaintext highlighter-rouge">pi</code> and <code class="language-plaintext highlighter-rouge">exp 1</code> live in a ‚Äúsmaller‚Äù set, that is, require a more specialized definition.</p>
</blockquote>

<h1 id="text-characters-tuples-strings-and-lists">Text characters, tuples, strings and lists</h1>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="sc">'a'</span>
<span class="sc">'a'</span> <span class="o">::</span> <span class="kt">Char</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="s">"potato"</span>
<span class="s">"potato"</span> <span class="o">::</span> <span class="p">[</span><span class="kt">Char</span><span class="p">]</span></code></pre></figure>

<p>Single characters are to be enclosed in single forward quotes whereas text strings require double quotes. Internally, strings are represented as lists of characters, so the above example is rendered internally as <code class="language-plaintext highlighter-rouge">['p','o','t','a','t','o']</code>.</p>

<p><em>Tuples</em> are <em>constant-size</em> ordered collections of data, not necessarily of the same type, separated by <code class="language-plaintext highlighter-rouge">,</code> and enclosed in <code class="language-plaintext highlighter-rouge">(</code> .. <code class="language-plaintext highlighter-rouge">)</code> as in</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="mi">132</span><span class="p">,</span> <span class="s">"potato"</span><span class="p">)</span>
<span class="p">(</span><span class="mi">132</span><span class="p">,</span> <span class="s">"potato"</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="p">[</span><span class="kt">Char</span><span class="p">])</span></code></pre></figure>

<p><em>Lists</em> are ordered collections of any <em>one</em> valid type of data, a very versatile tool:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="n">t</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="p">[</span><span class="mi">23</span> <span class="o">..</span> <span class="mi">28</span><span class="p">]</span>
<span class="p">[</span><span class="mi">23</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">26</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">28</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="p">[</span><span class="sc">'b'</span> <span class="o">..</span> <span class="sc">'m'</span><span class="p">]</span>
<span class="s">"bcdefghijklm"</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">[</span><span class="mi">1</span> <span class="o">..</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span> <span class="o">..</span><span class="p">]</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">t</span><span class="p">,</span> <span class="kt">Enum</span> <span class="n">t</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="n">t</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"one"</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"two"</span><span class="p">)]</span>
<span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="s">"one"</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s">"two"</span><span class="p">)]</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">t</span> <span class="o">=&gt;</span> <span class="p">[(</span><span class="n">t</span><span class="p">,</span> <span class="p">[</span><span class="kt">Char</span><span class="p">])]</span></code></pre></figure>

<blockquote>
  <p>Lists can be infinite in length (thus it is more appropriate to describe them as <em>streams</em>). Among the many other library functions, e.g. <code class="language-plaintext highlighter-rouge">take</code>, <code class="language-plaintext highlighter-rouge">drop</code> and <code class="language-plaintext highlighter-rouge">filter</code> let us query or pick out elements from streams.</p>
</blockquote>

<p>N.B.: if you actually decide to evaluate an infinite stream such as <code class="language-plaintext highlighter-rouge">[1 ..]</code>, be prepared to interrupt it! (Control-C terminates the execution of a command in Unix-like systems).</p>

<p>The <code class="language-plaintext highlighter-rouge">take</code> function, as the name implies, takes a few sequential elements from an array (i.e. outputs the first <em>n</em> elements of the array, where <em>n</em> is an integer number):</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">take</span>
<span class="n">take</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="n">take</span> <span class="mi">7</span> <span class="p">[</span><span class="mi">5</span> <span class="o">..</span><span class="p">]</span>
<span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">]</span></code></pre></figure>

<blockquote>
  <p>Function application such as <code class="language-plaintext highlighter-rouge">exp 1</code> and <code class="language-plaintext highlighter-rouge">take 7 [5..]</code> is so fundamental that Haskell uses a space to denote it, i.e. considering <code class="language-plaintext highlighter-rouge">f x y z</code>, <code class="language-plaintext highlighter-rouge">f</code> is the function and <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code> and <code class="language-plaintext highlighter-rouge">z</code> are its arguments.</p>
</blockquote>

<h1 id="higher-order-functions-partial-application-operator-sections">Higher order functions, partial application, operator sections</h1>

<p>A versatile list-digesting function is <code class="language-plaintext highlighter-rouge">filter</code>:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">filter</span>
<span class="n">filter</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="n">filter</span> <span class="p">(</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">]</span>
<span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">9</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="n">filter</span> <span class="p">(</span><span class="o">/=</span> <span class="sc">'x'</span><span class="p">)</span> <span class="s">"xxxjgxkjg"</span> 
<span class="s">"jgkjg"</span>
 </code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">filter</code> is our first example of <em>higher order function</em>; it requires as arguments a <em>function</em> of type <code class="language-plaintext highlighter-rouge">a -&gt; Bool</code> (a <em>predicate</em>, that is, a function that evaluates to <code class="language-plaintext highlighter-rouge">True</code> or <code class="language-plaintext highlighter-rouge">False</code>) and a list of <code class="language-plaintext highlighter-rouge">a</code>s and returns the subset of the input list that evaluates to <code class="language-plaintext highlighter-rouge">True</code>.</p>

<p>In the previous code block, we also see the first examples of <em>operator section</em>:
<code class="language-plaintext highlighter-rouge">(&gt; 2)</code> and <code class="language-plaintext highlighter-rouge">(/= 'x')</code>, passed as first argument to <code class="language-plaintext highlighter-rouge">filter</code>. 
The ordering relation <code class="language-plaintext highlighter-rouge">(&gt;)</code> is a binary operator (since it compares two values and returns True or False), but <code class="language-plaintext highlighter-rouge">(&gt; 2)</code> takes only one argument and returns a Boolean. Instead, <code class="language-plaintext highlighter-rouge">(/= 'x')</code> compares its only argument to the constant character <code class="language-plaintext highlighter-rouge">'x'</code>.</p>

<p>The following examples should clarify the idea:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span>
<span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span>
<span class="p">(</span><span class="o">==</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Eq</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
 
<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">(</span><span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">(</span><span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Eq</span> <span class="n">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
 </code></pre></figure>

<p>The arithmetic sum <code class="language-plaintext highlighter-rouge">(+)</code> and equality comparison <code class="language-plaintext highlighter-rouge">(==)</code> functions require two parameters, but fixing the first one to e.g. a constant is equivalent to considering functions of the remaining number of arguments. This is an instance of <em>partial evaluation</em>, ubiquitous in Haskell and very powerful.</p>

<blockquote>
  <p>Haskell functions are ‚Äúcurried‚Äù by default. This means that N-ary functions (functions of N arguments) can be considered as taking arguments in sequence, rather than all at once.</p>
</blockquote>

<blockquote>
  <p>This enables <em>partial evaluation</em>, i.e. creating new functions of fewer arguments by fixing some in the original function.</p>
</blockquote>

<blockquote>
  <p>This fundamental tool has many different uses, for example specializing a general function in a few different ways, by introducing very little additional syntax as we will see in the next sections.</p>
</blockquote>

<p>Operator sections are just shorthand for partial application of infix operators; however the usual caveats for non-commutative functions such as arithmetic division <code class="language-plaintext highlighter-rouge">/</code> apply; as the following snippet shows for numbers, ‚Äú.. over two‚Äù and ‚Äútwo over ..‚Äù have clearly different meanings.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="p">(</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="mi">3</span>
<span class="mf">1.5</span>

<span class="o">&gt;</span> <span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="p">)</span> <span class="mi">3</span>
<span class="mf">0.6666666666666666</span></code></pre></figure>

<p>Other useful higher-order functions that operate on lists are <code class="language-plaintext highlighter-rouge">map</code> and <code class="language-plaintext highlighter-rouge">foldr</code>:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">map</span>
<span class="n">map</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">b</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">foldr</span>
<span class="n">foldr</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">b</span>
 </code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">map</code> can be interpreted right from its signature: given a function from <code class="language-plaintext highlighter-rouge">a</code> to <code class="language-plaintext highlighter-rouge">b</code>, and a list of <code class="language-plaintext highlighter-rouge">a</code>s, it returns a list of <code class="language-plaintext highlighter-rouge">b</code>s, obtained by applying the function to every element of the input array.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="n">map</span> <span class="p">(</span><span class="o">==</span><span class="sc">'r'</span><span class="p">)</span> <span class="s">"chirp"</span>
<span class="p">[</span><span class="kt">False</span><span class="p">,</span><span class="kt">False</span><span class="p">,</span><span class="kt">False</span><span class="p">,</span><span class="kt">True</span><span class="p">,</span><span class="kt">False</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="n">map</span> <span class="p">(</span><span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span> <span class="o">..</span> <span class="mi">8</span><span class="p">]</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">16</span><span class="p">]</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">foldr</code> is a type of <em>fold</em> that is, an operator which reduces a set of things to a single summary value with a certain policy, i.e. function; it requires a binary function say <code class="language-plaintext highlighter-rouge">f</code>, an initial element of type <code class="language-plaintext highlighter-rouge">b</code> and a list of <code class="language-plaintext highlighter-rouge">a</code>s, and recursively applies <code class="language-plaintext highlighter-rouge">f</code> to the current first element of the remaining list and an accumulator value, which is returned as result. For example:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="n">foldr</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="mi">3</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">24</span><span class="p">]</span>
<span class="mi">42</span></code></pre></figure>

<p>We will see the implementation of <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">foldr</code> and of a few other essential library functions in the following.</p>

<p>It is very instructive to have a look at the <a href="https://hackage.haskell.org/package/base-4.8.0.0/docs/src/GHC-Base.html">Haskell Prelude</a>, the core library of the language.</p>

<h1 id="recap">Recap</h1>

<p>Whew! In this introductory section we have alread seen quite a few new concepts:</p>

<ul>
  <li>types</li>
  <li>classes of types (a.k.a. <em>typeclasses</em> <code class="language-plaintext highlighter-rouge">Num</code>, <code class="language-plaintext highlighter-rouge">Floating</code>, <code class="language-plaintext highlighter-rouge">Eq</code>, <code class="language-plaintext highlighter-rouge">Ord</code> ‚Ä¶)</li>
  <li>higher order functions</li>
  <li>partial application, operator sections</li>
</ul>

<p>In the following sections we will expand on and give examples for all the terms introduced so far (and a few more ..), and in a few pages the reader will be able to produce her first working programs !</p>

<hr />
<hr />
<p><a id="lambda"></a>&lt;/a&gt;</p>
<h2 id="notation-for-functional-programs">Notation for functional programs</h2>

<blockquote>
  <p>Anonymous expressions (often called ‚Äúlambda‚Äù functions) let us define what a function <em>does</em>, and to separate this from what we choose to call it.</p>
</blockquote>

<p>They often are used as single-use functions, if a certain functionality is too specific to be given a name; the pattern is <code class="language-plaintext highlighter-rouge">\ x -&gt; f x</code>, in which what lies to the left of the arrow is the set of free variables (separated by spaces if more than one), and what lies to the right is an arbitrarily complex function of these and other variables (this might be read ‚Äúfor any given <em>x</em>, give me the result of function <em>f</em> applied on <em>x</em>‚Äù, or \(\forall x, f(x)\)</p>

<p>The actual syntax to be used in the free variable declaration is a backslash, but it is often pretty-printed (e.g. in Computer Science and Logic textbooks) as a Greek lambda character, as a reminder of its origins in Church‚Äôs Lambda Calculus.</p>

<p>Two elementary examples of lambda expressions could be:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span>
<span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="nf">\</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="nf">\</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span></code></pre></figure>

<p>We should note that, in the snippet above, the Num constraint is introduced by <code class="language-plaintext highlighter-rouge">(*)</code> and <code class="language-plaintext highlighter-rouge">(+)</code>.</p>

<p>In the following, we will implement a few useful functions using only lambda expressions, to demonstrate their versatility and to introduce some key concepts.</p>

<h1 id="the-identity-function">The Identity function</h1>

<p>This one is pretty self explanatory:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span>
<span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">id</span>
<span class="n">id</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>
 </code></pre></figure>

<h1 id="function-application">Function application</h1>
<p>If the body of the lambda expression contains function application syntax, we can easily re-create <em>higher order functions</em>, as shown below:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="nf">\</span> <span class="n">f</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="n">x</span>
<span class="nf">\</span> <span class="n">f</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="n">x</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="o">$</span><span class="p">)</span>
<span class="p">(</span><span class="o">$</span><span class="p">)</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span>
 </code></pre></figure>

<p>The library function <code class="language-plaintext highlighter-rouge">($)</code> captures the function application pattern shown in the definition above it.</p>

<blockquote>
  <p>As the first example above shows, <strong>some function arguments are inferred to be functions by how they are used in the body</strong> of the (anonymous) function.</p>
</blockquote>

<blockquote>
  <p>Functions as ‚Äúfirst class values‚Äù (i.e. that can be used and passed around just like regular values) are one of the defining features of functional programming languages, and it is fundamental to absorb this concept early.</p>
</blockquote>

<p>As an example, we can apply the ``squared‚Äô‚Äô function to an arbitrary value:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="p">(</span><span class="o">$</span><span class="p">)</span> <span class="p">(</span><span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span> <span class="mf">0.98</span>
<span class="mf">0.9603999999999999</span></code></pre></figure>

<h1 id="function-composition">Function composition</h1>

<p>What does it mean to ‚Äúcompose functions‚Äù? If we think of a function as a machine on a factory floor, feeding the output of one (<em>g</em>, say)  into the input of the next (which we can call <em>f</em>) is a form of composition. This of course only works if the <em>f</em> is designed to work on the outputs of <em>g</em> (you wouldn‚Äôt want to plug a grinder to an Easter egg packaging machine, for example).</p>

<p>The <em>composition</em> of <em>f</em> and <em>g</em>, written <code class="language-plaintext highlighter-rouge">f . g</code> in Haskell and  \(f \circ g\) in mathematical literature, is itself a function, taking <code class="language-plaintext highlighter-rouge">g</code>‚Äôs input type and returning <code class="language-plaintext highlighter-rouge">f</code>‚Äôs result type. It‚Äôs as if we welded the two machines together, and obtained a new, more complex machine as a result. (However the Haskell compiler, when types are aligned, does a great job of simplifying out the ‚Äúseam‚Äù).</p>

<p>Here is a nested function application pattern, and below it the type signature of the corresponding library function <code class="language-plaintext highlighter-rouge">(.)</code>:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="nf">\</span> <span class="n">f</span> <span class="n">g</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="n">g</span> <span class="n">x</span><span class="p">)</span>
<span class="nf">\</span> <span class="n">f</span> <span class="n">g</span> <span class="n">x</span><span class="o">-&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="n">g</span> <span class="n">x</span><span class="p">)</span> <span class="o">::</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">c</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span>
<span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="o">::</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">c</span></code></pre></figure>

<p>When given two single-argument functions of the right types as inputs, as in <code class="language-plaintext highlighter-rouge">f . g</code> or <code class="language-plaintext highlighter-rouge">(.) f g</code> (the <em>infix</em> and <em>prefix</em> ways to write application of a binary operator, respectively), the result will be a new unary function of type <code class="language-plaintext highlighter-rouge">a -&gt; c</code> obtained by chaining the outputs of <code class="language-plaintext highlighter-rouge">g</code> to <code class="language-plaintext highlighter-rouge">f</code>: seamless.</p>

<blockquote>
  <p>The Haskell Prelude and the other built-in libraries come with a rich library of synonyms, such as <code class="language-plaintext highlighter-rouge">(.)</code> and <code class="language-plaintext highlighter-rouge">($)</code> shown above, and lets us define and use our own, as soon as the need for abstraction arises.</p>
</blockquote>

<h1 id="partial-evaluation">Partial evaluation</h1>

<p>When calling functions in Haskell, you don‚Äôt have to ‚Äúfill all the slots‚Äù, i.e. supply all the arguments; this is called <em>partial evaluation</em> (or <em>application</em>).</p>

<p>As explained briefly in the first section, the result of this is a new function, having a smaller number of arguments than the original one.</p>

<p>In the following we will see a few more examples of this from a slightly abstract point of view, in order not to lose sight of the pattern amid the implementation details.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">let</span> <span class="n">f1</span> <span class="o">=</span> <span class="nf">\</span> <span class="n">f</span> <span class="n">g</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="p">(</span><span class="n">g</span> <span class="n">x</span><span class="p">)</span> <span class="p">(</span><span class="n">g</span> <span class="n">y</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">f1</span>
<span class="n">f1</span> <span class="o">::</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">c</span></code></pre></figure>

<p>In the example above we first define a function <code class="language-plaintext highlighter-rouge">f1</code> of four arguments; in the next lines we specialize <code class="language-plaintext highlighter-rouge">f1</code> to use the sum or ordering relation <code class="language-plaintext highlighter-rouge">(&lt;)</code> as ‚Äúexternal‚Äù functions <code class="language-plaintext highlighter-rouge">f</code>. The ‚Äúinternal‚Äù function <code class="language-plaintext highlighter-rouge">g</code> is instead meant to be separately applied on the operands <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code>:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">f1</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span>
<span class="n">f1</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">b</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">f1</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="p">(</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span> 
<span class="n">f1</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="p">(</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">f1</span> <span class="p">(</span><span class="o">&lt;</span><span class="p">)</span>
<span class="n">f1</span> <span class="p">(</span><span class="o">&lt;</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Ord</span> <span class="n">b</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">f1</span> <span class="p">(</span><span class="o">&lt;</span><span class="p">)</span> <span class="n">cos</span>
<span class="n">f1</span> <span class="p">(</span><span class="o">&lt;</span><span class="p">)</span> <span class="n">cos</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Ord</span> <span class="n">t1</span><span class="p">,</span> <span class="kt">Floating</span> <span class="n">t1</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">t1</span> <span class="o">-&gt;</span> <span class="n">t1</span> <span class="o">-&gt;</span> <span class="kt">Bool</span></code></pre></figure>

<p>The expressions <code class="language-plaintext highlighter-rouge">f1 (+)</code>, <code class="language-plaintext highlighter-rouge">f1 (&lt;)</code> and <code class="language-plaintext highlighter-rouge">f1 (&lt;) exp</code> are examples of <em>partial application</em>; the resulting expression is itself a function with a reduced number of arguments than the original one.</p>

<p>The higher-order function <code class="language-plaintext highlighter-rouge">f2</code> accepts three arguments, the first of which is a binary function; if we only supply this, the result will itself be a binary function:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">let</span> <span class="n">f2</span> <span class="n">g</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="n">g</span> <span class="n">y</span> <span class="n">x</span> 

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">f2</span>
<span class="n">f2</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">c</span>
 
<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">flip</span>
<span class="n">flip</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">c</span><span class="p">)</span></code></pre></figure>

<p>(my parentheses on the right hand side of <code class="language-plaintext highlighter-rouge">flip</code>). Both <code class="language-plaintext highlighter-rouge">f2</code> and the library function <code class="language-plaintext highlighter-rouge">flip</code> return the input binary function but with exchanged order of arguments:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">let</span> <span class="n">pow</span> <span class="o">=</span> <span class="p">(</span><span class="o">^</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">pow</span>
<span class="n">pow</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Integral</span> <span class="n">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>
 
<span class="o">&gt;</span> <span class="n">pow</span> <span class="mi">2</span> <span class="mi">3</span>
<span class="mi">9</span>

<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">wop</span> <span class="o">=</span> <span class="n">flip</span> <span class="n">pow</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">wop</span>
<span class="n">wop</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Num</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Integral</span> <span class="n">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="n">a</span>
 
<span class="o">&gt;</span> <span class="n">wop</span> <span class="mi">2</span> <span class="mi">3</span>
<span class="mi">8</span></code></pre></figure>

<h1 id="eta-conversion">Eta-conversion</h1>

<p>Dropping or adding an abstraction over a variable to an expression are termed ‚Äúeta-reduction‚Äù and ‚Äúeta-abstraction‚Äù, respectively.
The following two expressions are identical, in this sense; the latter being the eta-reduced version of the former.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span>
<span class="nf">\</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span><span class="p">)</span>
<span class="p">(</span><span class="mi">2</span> <span class="o">*</span><span class="p">)</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span></code></pre></figure>

<h1 id="examples">Examples</h1>

<p>Let‚Äôs try together a few of the things we‚Äôve see so far: partial application, function composition, the higher order function <code class="language-plaintext highlighter-rouge">map :: (a -&gt; b) -&gt; [a] -&gt; [b]</code>, and operate on a list-of-lists for the first time:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">let</span> <span class="n">testData</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">23452</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">515</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">2351661</span><span class="p">]]</span>

<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">listShorterThan</span> <span class="n">m</span> <span class="o">=</span> <span class="p">(</span><span class="n">m</span> <span class="o">&gt;</span><span class="p">)</span> <span class="o">.</span> <span class="n">length</span> 

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">listShorterThan</span>
<span class="n">listShorterThan</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>

<span class="o">&gt;</span> <span class="n">map</span> <span class="p">(</span><span class="n">listShorterThan</span> <span class="mi">4</span><span class="p">)</span> <span class="n">testData</span>
<span class="p">[</span><span class="kt">True</span><span class="p">,</span><span class="kt">False</span><span class="p">,</span><span class="kt">True</span><span class="p">]</span></code></pre></figure>

<p>Recall how <code class="language-plaintext highlighter-rouge">(.)</code> works: from right to left. The rightmost function in the chain is the ‚Äúinnermost‚Äù, and the first to be applied. Our <code class="language-plaintext highlighter-rouge">listShorterThan</code> may be a bit contrived, but shows one advantage of this compositional approach: we are not interested in the actual length of the list, but only to know whether it‚Äôs shorter than <em>m</em>.</p>

<p>Another interesting, albeit a bit more abstract, little example is the following:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">map</span> <span class="o">.</span> <span class="n">map</span>
<span class="n">map</span> <span class="o">.</span> <span class="n">map</span> <span class="o">::</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="n">a</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="n">b</span><span class="p">]]</span> </code></pre></figure>

<p>A composition of <code class="language-plaintext highlighter-rouge">map</code>s is equivalent to <em>lifting</em> an <code class="language-plaintext highlighter-rouge">(a -&gt; b)</code> function to work onto lists of lists. Neat! We can easily prove this, by considering the composition operator <code class="language-plaintext highlighter-rouge">(.)</code> in infix position and plugging in the definitions;</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="n">map</span>
<span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="n">map</span> <span class="o">::</span> <span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">z</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">z</span><span class="p">]</span></code></pre></figure>

<p>and, since <code class="language-plaintext highlighter-rouge">map</code> is a binary function accepting a <em>function</em> and a list, we can identify equal terms. In the line above, if we partially apply <code class="language-plaintext highlighter-rouge">(.) map</code> on <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">x</code> is identified with a function and <code class="language-plaintext highlighter-rouge">y</code> has to be a list, resulting in the initial type identity.</p>

<p>Let‚Äôs recycle <code class="language-plaintext highlighter-rouge">testData</code> from the example before to try it out:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="p">(</span><span class="n">map</span> <span class="o">.</span> <span class="n">map</span><span class="p">)</span> <span class="p">(</span><span class="nf">\</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="kr">if</span> <span class="n">s</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="kr">then</span> <span class="sc">'+'</span> <span class="kr">else</span> <span class="sc">'-'</span><span class="p">)</span> <span class="n">testData</span>
<span class="p">[</span><span class="s">"--"</span><span class="p">,</span><span class="s">"+-+-"</span><span class="p">,</span><span class="s">"+"</span><span class="p">]</span></code></pre></figure>

<p>‚ÄúWow, if-then-else like a normal language !‚Äù</p>

<p>Jokes aside, the above example is meant to reinforce the point that in Haskell whole subprograms can be passed around, either as arguments or as return types to appropriate higher-order functions. Such is the nature of ‚Äúpurely functional‚Äù languages.</p>

<hr />
<hr />

<p><a id="io"> </a></p>
<h2 id="defining-new-symbols-functions-and-modules">Defining new symbols, functions and modules</h2>

<p>When in the interactive mode (or, equivalently, while we are working within the IO monad, more details in the following), we need the <code class="language-plaintext highlighter-rouge">let</code> construct, which behaves very much like its mathematical counterpart:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">let</span> <span class="n">a</span> <span class="o">=</span> <span class="n">pi</span> <span class="o">/</span> <span class="mi">2</span>

<span class="o">&gt;</span> <span class="n">a</span>
<span class="mf">1.5707963267948966</span>

<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">f</span> <span class="n">x</span> <span class="o">=</span> <span class="kr">if</span> <span class="n">x</span><span class="o">==</span><span class="sc">'o'</span> <span class="kr">then</span> <span class="sc">'i'</span> <span class="kr">else</span> <span class="n">x</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">f</span>
<span class="n">f</span> <span class="o">::</span> <span class="kt">Char</span> <span class="o">-&gt;</span> <span class="kt">Char</span>

<span class="o">&gt;</span> <span class="n">map</span> <span class="n">f</span> <span class="s">"potatoes"</span>
<span class="s">"pitaties"</span>
 </code></pre></figure>

<p>In bulk code, there is no need for <code class="language-plaintext highlighter-rouge">let</code> for declaring a new entity; if we write the following in a blank text file named, say, <code class="language-plaintext highlighter-rouge">TestModule.hs</code> :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="c1">-- If the prompt is not present, we assume to be working in a `.hs` text file, </span>
<span class="c1">-- to be loaded in GHCi.</span>

<span class="cm">{- 
The `--` token at the start of a line specifies a comment: 
the line as a whole is not interpreted as Haskell code. 
Multiple-line comments are enclosed in a `{-`,  `-}` pair.
-}</span>
<span class="kr">module</span> <span class="nn">TestModule</span> <span class="kr">where</span>

<span class="n">f1</span> <span class="o">=</span> <span class="p">(</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span>

<span class="n">v</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]</span>

<span class="n">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">putStrLn</span> <span class="o">$</span> <span class="n">map</span> <span class="n">f1</span> <span class="n">v</span></code></pre></figure>

<p>and load it with GHCi (from command line: <code class="language-plaintext highlighter-rouge">ghci TestModule.hs</code>), calling <code class="language-plaintext highlighter-rouge">main</code> will print <code class="language-plaintext highlighter-rouge">[4,9,16]</code> to screen.</p>

<blockquote>
  <p>In the previous code snippet we start to see one of Haskell‚Äôs strength points: a clean separation of input-output (‚ÄúIO‚Äù) and purely functional code. 
The first line is a function, the second a piece of data, and the <code class="language-plaintext highlighter-rouge">main</code> function runs the example (in this case <code class="language-plaintext highlighter-rouge">map</code>ping the squaring function over the data) and displays on-screen the results as a newline-terminated string with <code class="language-plaintext highlighter-rouge">putStrLn</code>.</p>
</blockquote>

<p>The <code class="language-plaintext highlighter-rouge">main</code> function effectively ‚Äúcoordinates‚Äù the execution of the purely functional parts; its body is a <code class="language-plaintext highlighter-rouge">do</code> block, to signify that it is to be executed top-to-bottom. However the intermediate results are only effectively computed when requested (this is the <em>non-strict</em>, or <em>lazy</em> evaluation logic of Haskell). In the code above, <code class="language-plaintext highlighter-rouge">f1</code> is <code class="language-plaintext highlighter-rouge">map</code>ped over <code class="language-plaintext highlighter-rouge">v</code> only when <code class="language-plaintext highlighter-rouge">putStrLn</code> is run.</p>

<p>We will return on how to write <code class="language-plaintext highlighter-rouge">do</code> blocks (the ‚Äúimperative‚Äù part of Haskell) shortly. At this point we still need to see a few general features of the language syntax.</p>

<hr />
<hr />

<p><a id="pattern"></a>&lt;/a&gt;</p>
<h2 id="pattern-matching">Pattern matching</h2>
<h1 id="recursive-functions">Recursive functions</h1>

<blockquote>
  <p>Haskell allows multiple declarations of any function, that are applied according to the arguments; this of course can hold only if the type signatures match and the declarations are mutually exclusive and complementary.</p>
</blockquote>

<p>As an example, this is the implementation of <code class="language-plaintext highlighter-rouge">map</code>:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">map</span> <span class="n">f</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">map</span> <span class="n">f</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="n">f</span> <span class="n">x</span> <span class="o">:</span> <span class="n">map</span> <span class="n">f</span> <span class="n">xs</span></code></pre></figure>

<p>The above code recursively consumes the list supplied as second argument by applying <code class="language-plaintext highlighter-rouge">f</code> to its first element and appending the result (with <code class="language-plaintext highlighter-rouge">(:)</code>) to the output array. The first declaration is used if the supplied list is empty (this decision is called <em>pattern matching</em>), which also holds at the base case of the recursion.</p>

<hr />
<h1 id="a-brief-digression-on-lists">A brief digression on lists</h1>

<p>Lists (‚Äústreams‚Äù) are better thought of in recursive terms: a list can either be the empty list, or a concatenation of an element to a preexisting list (including the empty one).
The signatures of <code class="language-plaintext highlighter-rouge">[]</code> and <code class="language-plaintext highlighter-rouge">(:)</code> represent exactly this, and in the following lines we see their use as ‚Äúlist constructors‚Äù:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">[]</span>
<span class="kt">[]</span> <span class="o">::</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="p">(</span><span class="o">:</span><span class="p">)</span>
<span class="p">(</span><span class="o">:</span><span class="p">)</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="mi">2</span> <span class="o">:</span> <span class="kt">[]</span>
<span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="o">&gt;</span> <span class="mi">4</span> <span class="o">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span></code></pre></figure>

<p>It seems like <code class="language-plaintext highlighter-rouge">[]</code> and <code class="language-plaintext highlighter-rouge">(:)</code> are intimately connected: both are necessary to build a non-trivial list. Having a ‚Äúneutral element‚Äù and an (associative) ‚Äúappending‚Äù operation is the characteristic of a much more general algebraic class called a <em>Monoid</em> (to which lists naturally belong), but discussing the details would distract us at this point.</p>

<p>For now, it suffices to say that <code class="language-plaintext highlighter-rouge">[]</code> and <code class="language-plaintext highlighter-rouge">(:)</code> are the <em>constructor</em> (methods) of the empty and nontrivial list respectively, and as such can be ‚Äúpattern matched against‚Äù in function declarations (left hand side of the <code class="language-plaintext highlighter-rouge">=</code>), or used for constructing a list from its elements in a function body (right hand side).</p>

<p>The notation <code class="language-plaintext highlighter-rouge">(x:xs)</code> in the calling sequence of <code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">foldr</code> etc. is one such example of ‚Äúpattern matching on the constructor of the input data‚Äù. <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">xs</code>, interpreted as an element of type <code class="language-plaintext highlighter-rouge">a</code> and list containing elements of the same type, <code class="language-plaintext highlighter-rouge">[a]</code>, respectively, will be used in the body of the function as usual.</p>

<hr />

<p>Let us now return to recursive functions that take apart their arguments by pattern matching.</p>

<p>A <em>fold</em> operation is to obtain a ‚Äúsummary‚Äù value from a set of values. The right-associative fold (<code class="language-plaintext highlighter-rouge">foldr</code>) is defined recursively as:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">foldr</span> <span class="n">f</span> <span class="n">z</span> <span class="kt">[]</span>     <span class="o">=</span> <span class="n">z</span>
<span class="n">foldr</span> <span class="n">f</span> <span class="n">z</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="n">f</span> <span class="n">x</span> <span class="p">(</span><span class="n">foldr</span> <span class="n">f</span> <span class="n">z</span> <span class="n">xs</span><span class="p">)</span></code></pre></figure>

<p>One of the most famous examples of Haskell conciseness is this implementation of the QuickSort algorithm:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">qsort</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">qsort</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="n">qsort</span> <span class="n">l</span> <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">++</span> <span class="n">qsort</span> <span class="n">r</span> <span class="kr">where</span>
   <span class="n">l</span> <span class="o">=</span> <span class="n">filter</span> <span class="p">(</span><span class="o">&lt;</span> <span class="n">x</span><span class="p">)</span> <span class="n">xs</span>
   <span class="n">r</span> <span class="o">=</span> <span class="n">filter</span> <span class="p">(</span><span class="o">&gt;</span> <span class="n">x</span><span class="p">)</span> <span class="n">xs</span></code></pre></figure>

<p>The first element of the unsorted list is chosen as pivot (This choice of pivoting means that this naive version of QuickSort will be suboptimal for partially sorted inputs.) and the remaining elements are filtered (cost <em>O (N)</em>) and passed to the next level of recursive call.</p>

<blockquote>
  <p>The three examples above all use <em>pattern matching on the constructor</em> of the input data, i.e. if the input is the empty list, the base case is computed, otherwise (list with at least one element <code class="language-plaintext highlighter-rouge">x</code>) the algorithm takes the induction branch.</p>
</blockquote>

<p>We can apply the same reasoning to user-made types (which will be explained in the following Section):</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">data</span> <span class="kt">Pop</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">Z</span> <span class="o">|</span> <span class="kt">P</span> <span class="n">a</span>
<span class="kr">data</span> <span class="kt">Pip</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">W</span> <span class="o">|</span> <span class="kt">Q</span> <span class="n">a</span>

<span class="n">woop</span> <span class="kt">Z</span> <span class="o">=</span> <span class="kt">W</span>
<span class="n">woop</span> <span class="p">(</span><span class="kt">P</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="kt">Q</span> <span class="n">r</span> <span class="kr">where</span>
  <span class="n">r</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span></code></pre></figure>

<p>and, after loading the above code in GHCi:</p>

<p>Above we have used two <em>algebraic, polymorphic types</em> <code class="language-plaintext highlighter-rouge">Pop a</code> and <code class="language-plaintext highlighter-rouge">Pip a</code> and a function that pattern matches on each constructor of the input data type.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">woop</span>
<span class="n">woop</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="kt">Pop</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Pip</span> <span class="n">a</span></code></pre></figure>

<h1 id="pattern-guards">Pattern guards</h1>

<p>One form of conditional branching statement is the <em>pattern guard</em> <code class="language-plaintext highlighter-rouge">|</code>. Let‚Äôs see a posible implementation of <code class="language-plaintext highlighter-rouge">filter</code>:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">filter'</span> <span class="kr">_</span> <span class="kt">[]</span> <span class="o">=</span> <span class="kt">[]</span>
<span class="n">filter'</span> <span class="n">p</span> <span class="p">(</span><span class="n">x</span><span class="o">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">|</span> <span class="n">p</span> <span class="n">x</span>       <span class="o">=</span> <span class="n">x</span> <span class="o">:</span> <span class="n">filter'</span> <span class="n">p</span> <span class="n">xs</span>
                 <span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="n">filter'</span> <span class="n">p</span> <span class="n">xs</span></code></pre></figure>

<p>If <code class="language-plaintext highlighter-rouge">p x</code> evaluates to <code class="language-plaintext highlighter-rouge">True</code>, the first branch is taken;</p>

<p>The options (expressions after <code class="language-plaintext highlighter-rouge">|</code>) are evaluated in top-to-bottom order, and the last one is only evaluated if none of the previous ones evaluates to <code class="language-plaintext highlighter-rouge">True</code>.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">oddness</span> <span class="n">x</span>
   <span class="o">|</span> <span class="n">odd</span> <span class="n">x</span> <span class="o">=</span> <span class="n">sx</span> <span class="o">++</span> <span class="s">" is odd"</span>
   <span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="n">sx</span> <span class="o">++</span> <span class="s">" is even"</span>
       <span class="kr">where</span>
         <span class="n">sx</span> <span class="o">=</span> <span class="n">show</span> <span class="n">x</span>

<span class="n">buzz</span> <span class="n">x</span> 
   <span class="o">|</span> <span class="n">f</span> <span class="o">||</span> <span class="n">g</span>  <span class="o">=</span> <span class="mi">0</span>             <span class="c1">-- (||) is the logical OR operation</span>
   <span class="o">|</span> <span class="n">even</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
   <span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="mi">2</span> 
       <span class="kr">where</span>
         <span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="p">`</span><span class="n">mod</span><span class="p">`</span> <span class="mi">7</span> <span class="o">==</span> <span class="mi">0</span>
         <span class="n">g</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">20</span></code></pre></figure>

<p>Pattern guards are convenient syntax for deciding which conditional branch to take according to the <em>truth value</em> computed from one or more of the input variables. Note that the functions acting as pattern guards (e.g. <code class="language-plaintext highlighter-rouge">odd x</code>, <code class="language-plaintext highlighter-rouge">f || g</code>) have to return a Boolean, and only after the <code class="language-plaintext highlighter-rouge">=</code> sign do we specify the return value for each branch.</p>

<blockquote>
  <p>Quiz: what are the type signatures of <code class="language-plaintext highlighter-rouge">oddness</code> and <code class="language-plaintext highlighter-rouge">buzz</code> and why ?</p>
</blockquote>

<hr />
<hr />

<p><a id="data"></a> &lt;/a&gt;</p>
<h2 id="datatypes">Datatypes</h2>
<h1 id="record-notation-constructor-as-a-function">Record notation, constructor as a function</h1>

<p>We can specify datatypes (which remind of structs in C) with the <code class="language-plaintext highlighter-rouge">data</code> keyword, as shown in the following examples.
(Also <code class="language-plaintext highlighter-rouge">newtype</code> can be used in the same fashion as <code class="language-plaintext highlighter-rouge">data</code>, for datastructures that have a single constuctor, but the difference between the two keywords is a bit technical and will not be discussed here.)</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">TypeA</span> <span class="o">=</span> <span class="kt">MakeA</span> <span class="p">{</span> <span class="n">unA</span> <span class="o">::</span> <span class="kt">Int</span> <span class="p">}</span> <span class="kr">deriving</span> <span class="kt">Show</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">MakeA</span>
<span class="kt">MakeA</span> <span class="o">::</span> <span class="kt">Int</span> <span class="o">-&gt;</span> <span class="kt">TypeA</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">unA</span>
<span class="n">unA</span> <span class="o">::</span> <span class="kt">TypeA</span> <span class="o">-&gt;</span> <span class="kt">Int</span></code></pre></figure>

<p>The constructor (<code class="language-plaintext highlighter-rouge">MakeA</code>, in this case) is a function; we build a data ‚Äúobject‚Äù by passing the appropriate arguments to it and whenever we need the values stored inside, we just call the appropriate accessor method (<code class="language-plaintext highlighter-rouge">unA</code>, in the example), using the data object as its argument :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">let</span> <span class="n">test1</span> <span class="o">=</span> <span class="kt">MakeA</span> <span class="mi">597</span>

<span class="o">&gt;</span> <span class="n">test1</span>
<span class="kt">MakeA</span> <span class="p">{</span><span class="n">unA</span> <span class="o">=</span> <span class="mi">597</span><span class="p">}</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">test1</span>
<span class="n">test1</span> <span class="o">::</span> <span class="kt">TypeA</span>

<span class="o">&gt;</span> <span class="n">unA</span> <span class="n">test1</span>
<span class="mi">597</span></code></pre></figure>

<p>Within the curly brackets we can specify a number of ‚Äúrecords‚Äù to hold values; however these are not simple data fields but also declare the accessor functions to retrieve them.</p>

<blockquote>
  <p>Haskell provides the machinery to augment our datatypes, by making them ‚Äúinstances‚Äù of standard classes such as <code class="language-plaintext highlighter-rouge">Show</code> above. 
If a datatype is an instance of one or more classes, it ‚Äúinherits‚Äù the functionality of that class, so in the present example making <code class="language-plaintext highlighter-rouge">TypeA</code> an instance of <code class="language-plaintext highlighter-rouge">Show</code> lets us print <code class="language-plaintext highlighter-rouge">TypeA</code> objects on screen.</p>
</blockquote>

<p>N.B.: if we hadn‚Äôt made <code class="language-plaintext highlighter-rouge">TypeA</code> an instance of <code class="language-plaintext highlighter-rouge">Show</code>, the evaluation of <code class="language-plaintext highlighter-rouge">test1</code> would have returned a ‚ÄúNo instance for (Show TypeA) ‚Ä¶ ‚Äú error, instead.</p>

<p>Let‚Äôs declare a slightly larger datatype constructor and try out its accessor functions:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Test</span> <span class="o">=</span> <span class="kt">Tee</span> <span class="p">{</span> <span class="n">h1</span> <span class="o">::</span> <span class="p">[(</span><span class="kt">Bool</span><span class="p">,</span> <span class="kt">String</span><span class="p">)],</span> <span class="n">h2</span> <span class="o">::</span> <span class="kt">Char</span> <span class="p">}</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Tee</span>
<span class="kt">Tee</span> <span class="o">::</span> <span class="p">[(</span><span class="kt">Bool</span><span class="p">,</span> <span class="kt">String</span><span class="p">)]</span> <span class="o">-&gt;</span> <span class="kt">Char</span> <span class="o">-&gt;</span> <span class="kt">Test</span>


<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">test2</span> <span class="o">=</span> <span class="kt">Tee</span> <span class="p">[(</span><span class="kt">True</span><span class="p">,</span> <span class="s">"boop"</span><span class="p">)]</span> <span class="sc">'x'</span>

<span class="o">&gt;</span> <span class="p">(</span><span class="n">snd</span> <span class="o">.</span> <span class="n">head</span> <span class="o">.</span> <span class="n">h1</span><span class="p">)</span> <span class="n">test2</span>
<span class="s">"boop"</span>

<span class="o">&gt;</span> <span class="n">h2</span> <span class="n">test2</span>
<span class="sc">'x'</span></code></pre></figure>

<p>In the above example, we have declared a <code class="language-plaintext highlighter-rouge">Test</code> datatype with constructor <code class="language-plaintext highlighter-rouge">Tee</code> and two records, the first of which is of a composite type, and created a <code class="language-plaintext highlighter-rouge">test2</code> object of this type.</p>

<p>Next, we access an internal field in a purely functional style, by composition of elementary functions. This idea of functional manipulation of ‚Äúgetter‚Äù/‚Äùsetter‚Äù methods for nested datastructure is called <em>lensing</em>, and it is implemented (and greatly expanded) in a few packages such as <a href="https://hackage.haskell.org/package/lens">lens</a>, which however is beyond the scope of this tutorial.</p>

<blockquote>
  <p>What happens if we supply an integer to the Tee constructor, instead of the expected list of <code class="language-plaintext highlighter-rouge">(Bool, String)</code> tuples? Our first type error! &lt;3</p>
</blockquote>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Tee</span> <span class="mi">2</span>

<span class="o">&lt;</span><span class="n">interactive</span><span class="o">&gt;:</span><span class="mi">1</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span>
   <span class="kt">No</span> <span class="kr">instance</span> <span class="n">for</span> <span class="p">(</span><span class="kt">Num</span> <span class="p">[(</span><span class="kt">Bool</span><span class="p">,</span> <span class="kt">String</span><span class="p">)])</span> <span class="n">arising</span> <span class="n">from</span> <span class="n">the</span> <span class="n">literal</span> <span class="sc">'2'</span>
   <span class="kt">In</span> <span class="n">the</span> <span class="n">first</span> <span class="n">argument</span> <span class="kr">of</span> <span class="kt">'Tee'</span><span class="p">,</span> <span class="n">namely</span> <span class="sc">'2'</span>
   <span class="kt">In</span> <span class="n">the</span> <span class="n">expression</span><span class="o">:</span> <span class="kt">Tee</span> <span class="mi">2</span></code></pre></figure>

<blockquote>
  <p>The second line, ‚ÄúIn the first argument of ‚ÄòTee‚Äô‚Äù, is the hint!</p>
</blockquote>

<h1 id="type-synonyms">Type synonyms</h1>

<p>The keyword <code class="language-plaintext highlighter-rouge">type</code> is reserved to declare transparent type synonyms (i.e. that are internally re-written into their elementary types at compile time). Let‚Äôs see a few examples:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">type</span> <span class="kt">Name</span> <span class="o">=</span> <span class="kt">String</span>

<span class="o">&gt;</span> <span class="kr">type</span> <span class="kt">Address</span> <span class="o">=</span> <span class="p">(</span><span class="kt">String</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="kr">type</span> <span class="kt">Contact</span> <span class="o">=</span> <span class="p">(</span><span class="kt">Name</span><span class="p">,</span> <span class="kt">Address</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="kr">type</span> <span class="kt">Directory</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Contact</span><span class="p">]</span></code></pre></figure>

<blockquote>
  <p>Type synonyms let us describe the problem domain more accurately, and enforce consistency among the functions using them.</p>
</blockquote>

<h1 id="a-worked-example">A worked example</h1>

<p>We now show a slightly longer example, a sketch of customer database application with query functions. The code captures the situation of having an array of structured data and having to take a decision based on some computation performed on each entry. Here we aim to display together a few of the syntactic elements shown so far, in a not-too-contrived setting.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">type</span> <span class="kt">NameStr</span> <span class="o">=</span> <span class="kt">String</span>
<span class="kr">type</span> <span class="kt">AddrStr</span> <span class="o">=</span> <span class="kt">String</span>
<span class="kr">type</span> <span class="kt">AddrN</span> <span class="o">=</span> <span class="kt">Int</span>
<span class="kr">data</span> <span class="kt">Address</span> <span class="o">=</span> <span class="kt">A</span> <span class="p">{</span><span class="n">addressStr</span> <span class="o">::</span> <span class="kt">AddrStr</span><span class="p">,</span>
                  <span class="n">houseNo</span> <span class="o">::</span> <span class="kt">AddrN</span><span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>
                                                   
<span class="kr">data</span> <span class="kt">Name</span> <span class="o">=</span> <span class="kt">N</span> <span class="p">{</span><span class="n">nameStr</span> <span class="o">::</span> <span class="kt">NameStr</span><span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>

<span class="kr">data</span> <span class="kt">Contact</span> <span class="o">=</span> <span class="kt">C</span> <span class="p">{</span><span class="n">name</span> <span class="o">::</span> <span class="kt">Name</span><span class="p">,</span>
                  <span class="n">addr</span> <span class="o">::</span> <span class="kt">Address</span><span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Show</span><span class="p">,</span> <span class="kt">Eq</span><span class="p">)</span>

<span class="n">houseNoContact</span> <span class="o">=</span> <span class="n">houseNo</span> <span class="o">.</span> <span class="n">addr</span>
<span class="n">nameContact</span> <span class="o">=</span> <span class="n">nameStr</span> <span class="o">.</span> <span class="n">name</span>
<span class="n">addressContact</span> <span class="o">=</span> <span class="n">addressStr</span> <span class="o">.</span> <span class="n">addr</span></code></pre></figure>

<p>A query method <code class="language-plaintext highlighter-rouge">deliver</code> : if the house number is within range, return <code class="language-plaintext highlighter-rouge">True</code></p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">deliver</span> <span class="n">nMax</span> <span class="n">nMin</span> <span class="n">c</span>
  <span class="o">|</span> <span class="n">inRange</span> <span class="p">(</span><span class="n">houseNoContact</span> <span class="n">c</span><span class="p">)</span> <span class="o">=</span> <span class="kt">True</span>
  <span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="kt">False</span> <span class="kr">where</span>
       <span class="n">inRange</span> <span class="n">m</span> <span class="o">=</span> <span class="n">abs</span> <span class="p">(</span><span class="n">nMax</span> <span class="o">-</span> <span class="n">nMin</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">abs</span> <span class="p">(</span><span class="n">m</span> <span class="o">-</span> <span class="n">nMin</span><span class="p">)</span></code></pre></figure>

<p>or, more concisely:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">deliver'</span> <span class="n">nMax</span> <span class="n">nMin</span> <span class="n">c</span> <span class="o">=</span> <span class="n">abs</span> <span class="p">(</span><span class="n">nMax</span> <span class="o">-</span> <span class="n">nMin</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">abs</span> <span class="p">(</span><span class="n">houseNoContact</span> <span class="n">c</span> <span class="o">-</span> <span class="n">nMin</span><span class="p">)</span></code></pre></figure>

<blockquote>
  <p>Quiz: what is the type signature of <code class="language-plaintext highlighter-rouge">deliver'</code> and why?</p>
</blockquote>

<p>Partial application of both <code class="language-plaintext highlighter-rouge">deliver</code> and <code class="language-plaintext highlighter-rouge">filter</code> :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">todaysDeliveries</span> <span class="n">n1</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">filter</span> <span class="p">(</span><span class="n">deliver</span> <span class="n">n1</span> <span class="n">n2</span><span class="p">)</span></code></pre></figure>

<p>We can now load the previous code snippet in GHCi and see the signature of today‚Äôs delivery list, mapping from two house numbers and a list of contacts to the subset of the original contact list whose house number lies within the range.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">todaysDeliveries</span>
<span class="n">todaysDeliveries</span> <span class="o">::</span> <span class="kt">AddrN</span> <span class="o">-&gt;</span> <span class="kt">AddrN</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Contact</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Contact</span><span class="p">]</span></code></pre></figure>

<blockquote>
  <p>Haskell uses a <em>decidable</em> type system (the Hindley-Milner system) which allows the type-checking algorithm to always terminate without the user having to supply type annotations; in the above example we see the utility of this: using partial application wisely, we can achieve the desired signature function very concisely.</p>
</blockquote>

<blockquote>
  <p>Concise code has very far-reaching implications, besides just ‚Äúlooking clever‚Äù: it greatly simplifies reasoning, checking for correctness, refactoring and knowledge propagation. This is one of the many examples in which Haskell‚Äôs theoretical foundations have very practical advantages.</p>
</blockquote>

<p>For instance, imagine having one day to update the matching criterion, i.e. the function <code class="language-plaintext highlighter-rouge">deliver</code> in our case; it‚Äôs a single line change, and as long as the types match, the whole code will still be correct.</p>

<p>An example data entry for the delivery example above:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">name1</span> <span class="o">=</span> <span class="kt">N</span> <span class="s">"John Doe"</span>
<span class="n">addr1</span> <span class="o">=</span> <span class="kt">A</span> <span class="s">"Potato St."</span> <span class="mi">42</span>
<span class="n">contact1</span> <span class="o">=</span> <span class="kt">C</span> <span class="n">name1</span> <span class="n">addr1</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">contact1</span>
<span class="n">contact1</span> <span class="o">::</span> <span class="kt">Contact</span></code></pre></figure>

<h1 id="algebraic-types">Algebraic types</h1>

<p>We have already seen an instance of an algebraic datatype (ADT): <code class="language-plaintext highlighter-rouge">Bool</code> can have two mutually exclusive values.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kt">True</span> <span class="o">|</span> <span class="kt">False</span>

<span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">PS</span> <span class="o">=</span> <span class="kt">Tri</span> <span class="o">|</span> <span class="kt">Cir</span> <span class="o">|</span> <span class="kt">Sqr</span> <span class="o">|</span> <span class="kt">Crs</span></code></pre></figure>

<h1 id="polymorphic-types">Polymorphic types</h1>
<p>Polymorphic types can be thought of as a labeled scaffolding for more elementary types; in the following example we show how the constructor <code class="language-plaintext highlighter-rouge">Pt a a</code> can be specialized to cater for various needs:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Point</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">Pt</span> <span class="n">a</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Pt</span> <span class="mi">2</span> <span class="mi">3</span> 
<span class="kt">Pt</span> <span class="mi">2</span> <span class="mi">3</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="kt">Point</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">Pt</span> <span class="sc">'c'</span> <span class="sc">'d'</span>
<span class="kt">Pt</span> <span class="sc">'c'</span> <span class="sc">'d'</span> <span class="o">::</span> <span class="kt">Point</span> <span class="kt">Char</span>

<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">inside</span> <span class="n">p1</span> <span class="n">p2</span> <span class="o">=</span> <span class="kr">let</span> <span class="n">normP</span> <span class="p">(</span><span class="kt">Pt</span> <span class="n">x</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="kr">in</span> <span class="n">normP</span> <span class="n">p1</span> <span class="o">&lt;</span> <span class="n">normP</span> <span class="n">p2</span> 

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">inside</span>
<span class="n">inside</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Ord</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Num</span> <span class="n">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kt">Point</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Point</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Bool</span></code></pre></figure>

<blockquote>
  <p>Quiz: why do the<code class="language-plaintext highlighter-rouge">Ord</code> and <code class="language-plaintext highlighter-rouge">Num</code> constraints arise, in the definition of <code class="language-plaintext highlighter-rouge">inside</code> ?</p>
</blockquote>

<p>A simple polymorphic datatype to represent a computation that can fail is <code class="language-plaintext highlighter-rouge">Maybe a</code>:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Maybe</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">Nothing</span> <span class="o">|</span> <span class="kt">Just</span> <span class="n">a</span></code></pre></figure>

<p>For example, we can implement a simple ‚Äúsafe division‚Äù, as follows</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">safeDiv</span> <span class="n">a</span> <span class="n">b</span>
  <span class="o">|</span> <span class="n">b</span> <span class="o">/=</span> <span class="mi">0</span> <span class="o">=</span> <span class="kt">Just</span> <span class="p">(</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span> <span class="p">)</span>
  <span class="o">|</span> <span class="n">otherwise</span> <span class="o">=</span> <span class="kt">Nothing</span> 

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">safeDiv</span>
<span class="n">safeDiv</span> <span class="o">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">a</span><span class="p">,</span> <span class="kt">Fractional</span> <span class="n">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="n">a</span></code></pre></figure>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">Maybe a</code> type is a simple way to treat <em>errors as values</em>, and to perform further computation on them, rather than letting the program fail and stop.</p>
</blockquote>

<h1 id="recursive-types">Recursive types</h1>

<p>We have been using a recursive data structure all along, the humble list:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">[]</span> <span class="o">|</span> <span class="n">a</span> <span class="o">:</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> 	<span class="c1">-- Defined in ‚ÄòGHC.Types‚Äô</span></code></pre></figure>

<p>Next, we introduce a handy binary tree type <code class="language-plaintext highlighter-rouge">Tree a</code>, which can be either a ‚Äúleaf‚Äù <code class="language-plaintext highlighter-rouge">L</code> carrying a type <code class="language-plaintext highlighter-rouge">a</code>, i.e. <code class="language-plaintext highlighter-rouge">L a</code>, or a ‚Äúbranch‚Äù <code class="language-plaintext highlighter-rouge">B</code> carrying two <code class="language-plaintext highlighter-rouge">Tree a</code>‚Äôs.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="o">&gt;</span> <span class="kr">data</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="o">=</span> <span class="kt">L</span> <span class="n">a</span> <span class="o">|</span> <span class="kt">B</span> <span class="p">(</span><span class="kt">Tree</span> <span class="n">a</span><span class="p">)</span> <span class="p">(</span><span class="kt">Tree</span> <span class="n">a</span><span class="p">)</span> <span class="kr">deriving</span> <span class="kt">Show</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">L</span>
<span class="kt">L</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Tree</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="kt">B</span>
<span class="kt">B</span> <span class="o">::</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Tree</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Tree</span> <span class="n">a</span>

<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">leaf1</span> <span class="o">=</span> <span class="kt">L</span> <span class="mi">15</span>
 
<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">leaf2</span> <span class="o">=</span> <span class="kt">L</span> <span class="mi">27</span>
 
<span class="o">&gt;</span> <span class="kt">B</span> <span class="n">leaf1</span> <span class="n">leaf2</span>
<span class="kt">B</span> <span class="p">(</span><span class="kt">L</span> <span class="mi">15</span><span class="p">)</span> <span class="p">(</span><span class="kt">L</span> <span class="mi">27</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="kr">let</span> <span class="n">b0</span> <span class="o">=</span> <span class="kt">B</span> <span class="n">leaf1</span> <span class="n">leaf2</span>

<span class="o">&gt;</span> <span class="o">:</span><span class="n">t</span> <span class="n">b0</span>
<span class="n">b0</span> <span class="o">::</span> <span class="kt">Num</span> <span class="n">a</span> <span class="o">=&gt;</span> <span class="kt">Tree</span> <span class="n">a</span>         </code></pre></figure>

<p>Trees have very convenient asymptotic performance for search and sorting operations, and they are naturally suited to be traversed with recursive logic in Haskell.</p>

:ET