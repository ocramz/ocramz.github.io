I"s<<h2 id="introduction">Introduction</h2>

<p>Interactive web applications feature a complex exchange of information between user, frontend and backend; in time the focus of this complexity has shifted from the backend (remember CGI scripts?) to the frontend (javascript, perhaps webassembly one day) and back.</p>

<p>Form-based interaction is an interesting subset of this problem since the input data is well structured and the problem can be formalized in some generality. One such formalization is due to Cooper et al.</p>

<p>What’s a web form? It’s really two things : an (HTML) view and a callback that will process the inputs submitted via that view, and possibly produce a new view as a result.</p>

<p>Schematically, <code class="language-plaintext highlighter-rouge">(view, input -&gt; Maybe view')</code></p>

<p>We would like this notion to be <em>composable</em> : forms are arrays of typed inputs (e.g. strings, booleans, numbers, dates), and we expect to parse the input into a corresponding arrays of output values.</p>

<h2 id="parallel-validation">Parallel validation</h2>

<p>As we saw above, processing user input is half of the “form problem”.</p>

<p>Say we want to validate a street address, composed of a street name and number and a postal code. We can think of a few rules that a good street address must satisfy : the street name should be formatted in a certain way, the number should be a positive integer and the postal code made of 5 digits.</p>

<p>If we write these rules as little validation functions, how can we compose these functions together back into one that validates the address as a whole?</p>

<p>Practically, we are looking to achieve this :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">validStreetName</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Street</span>

<span class="n">validStreetNo</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">N</span>

<span class="n">validPostCode</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">PostCode</span>

<span class="o">...</span>

<span class="n">validAddress</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="kt">Street</span><span class="p">,</span> <span class="kt">Name</span><span class="p">,</span> <span class="kt">PostCode</span><span class="p">)</span></code></pre></figure>

<h2 id="applicative">Applicative</h2>

<p>In functional programming languages the notion of <code class="language-plaintext highlighter-rouge">Applicative</code> functor represents a property of functions that perform more than one independent computation.</p>

<p>In Haskell, this abstraction comes in form of a typeclass with the same name (called “Idiom” originally by McBride and Paterson who discovered it).</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">class</span> <span class="kt">Functor</span> <span class="n">f</span> <span class="o">=&gt;</span> <span class="kt">Applicative</span> <span class="n">f</span> <span class="kr">where</span>
  <span class="n">pure</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="n">a</span>
  <span class="p">(</span><span class="o">&lt;*&gt;</span><span class="p">)</span> <span class="o">::</span> <span class="n">f</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="n">f</span> <span class="n">b</span></code></pre></figure>

<p>“Star” ( <code class="language-plaintext highlighter-rouge">&lt;*&gt;</code> ) can be seen as a natural composition operator for “curried” functions that have effects, and is exactly what lets us compose validators.</p>

<p>Simplifying somewhat :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">validAddress</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="kt">Street</span><span class="p">,</span> <span class="kt">Name</span><span class="p">,</span> <span class="kt">PostCode</span><span class="p">)</span>
<span class="n">validAddress</span> <span class="n">input</span> <span class="o">=</span> <span class="p">(,,)</span> <span class="o">&lt;$&gt;</span> <span class="n">validStreetName</span> <span class="o">&lt;*&gt;</span> <span class="n">validStreetNo</span> <span class="o">&lt;*&gt;</span> <span class="n">validPostCode</span></code></pre></figure>

<h2 id="applicative-formlets">Applicative formlets</h2>

<p>What’s needed now is an (embedded) language that lets us write both form validators and views in terms of the <code class="language-plaintext highlighter-rouge">Applicative</code> interface. Enter the <code class="language-plaintext highlighter-rouge">Form</code> DSL :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">data</span> <span class="kt">Form</span> <span class="n">a</span> <span class="kr">where</span>
  <span class="kt">FormField</span> <span class="o">::</span> <span class="kt">Field</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Form</span> <span class="n">a</span>
  <span class="kt">Pure</span> <span class="o">::</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Form</span> <span class="n">a</span>
  <span class="kt">App</span> <span class="o">::</span> <span class="kt">Form</span> <span class="p">(</span><span class="n">a</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Form</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Form</span> <span class="n">b</span></code></pre></figure>

<p>The constructors <code class="language-plaintext highlighter-rouge">Pure</code> and <code class="language-plaintext highlighter-rouge">App</code> are used to implement the <code class="language-plaintext highlighter-rouge">Applicative</code> interface for <code class="language-plaintext highlighter-rouge">Form</code>, whereas <code class="language-plaintext highlighter-rouge">FormField</code> contains form elements.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="kr">data</span> <span class="kt">Field</span> <span class="n">a</span> <span class="kr">where</span>
  <span class="c1">-- | text input field</span>
  <span class="kt">Text</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Field</span> <span class="kt">String</span>
  <span class="c1">-- | switch (binary choice)</span>
  <span class="kt">Switch</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Field</span> <span class="kt">Bool</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">String</code> input to the <code class="language-plaintext highlighter-rouge">Field</code> constructors is shorthand for a unique reference that will be used to lookup the form inputs from the frontend request body.</p>

<p>We can then declare “smart constructors” for the form elements, that will be labeled with the respective output type :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">switch</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Form</span> <span class="kt">Bool</span>
<span class="n">switch</span> <span class="n">ref</span> <span class="o">=</span> <span class="kt">FormField</span> <span class="o">$</span> <span class="kt">Switch</span> <span class="n">ref</span> </code></pre></figure>

<h2 id="viewing-and-evaluating-forms">Viewing and evaluating forms</h2>

<p>Now we need ways to convert <code class="language-plaintext highlighter-rouge">Form</code> terms into HTML views and validation callbacks respectively. Concretely, we need to write two functions, <code class="language-plaintext highlighter-rouge">view</code> and <code class="language-plaintext highlighter-rouge">eval</code>.</p>

<p>I provide two implementation sketches here, but the details depend on the semantics of the frontend framework that generates form data.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">view</span> <span class="o">::</span> <span class="kt">Form</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Widget</span><span class="p">]</span>
<span class="n">view</span> <span class="o">=</span> <span class="nf">\</span><span class="kr">case</span>
  <span class="kt">FormField</span> <span class="n">ff</span> <span class="o">-&gt;</span> <span class="n">pure</span> <span class="o">$</span> <span class="n">viewField</span> <span class="n">ff</span>
  <span class="kt">Pure</span> <span class="kr">_</span> <span class="o">-&gt;</span> <span class="n">pure</span> <span class="s">""</span>
  <span class="kt">App</span> <span class="p">(</span><span class="kt">Pure</span> <span class="kr">_</span><span class="p">)</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">view</span> <span class="n">x</span>
  <span class="kt">App</span> <span class="n">f</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">view</span> <span class="n">f</span> <span class="o">&lt;&gt;</span> <span class="n">view</span> <span class="n">x</span>
  
<span class="n">viewField</span> <span class="o">::</span> <span class="kt">Field</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Widget</span>
<span class="n">viewField</span> <span class="o">=</span> <span class="nf">\</span><span class="kr">case</span>
  <span class="kt">Switch</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="o">...</span></code></pre></figure>

<p>Evaluation too builds up the result by recursively unpacking the input form :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">eval</span> <span class="o">::</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="o">=&gt;</span>
        <span class="kt">FormInputs</span> <span class="c1">-- ^ parsed from the message body</span>
     <span class="o">-&gt;</span> <span class="kt">Form</span> <span class="n">a</span> <span class="c1">-- ^ our form</span>
     <span class="o">-&gt;</span> <span class="n">m</span> <span class="p">(</span><span class="kt">Result</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="n">a</span><span class="p">)</span>
<span class="n">eval</span> <span class="n">gfi</span> <span class="o">=</span> <span class="nf">\</span><span class="kr">case</span>
  <span class="kt">FormField</span> <span class="n">ff</span> <span class="o">-&gt;</span> <span class="n">pure</span> <span class="o">$</span> <span class="n">evalField</span> <span class="n">gfi</span> <span class="n">ff</span>
  <span class="kt">Pure</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">pure</span> <span class="p">(</span><span class="n">pure</span> <span class="n">x</span><span class="p">)</span>
  <span class="kt">App</span> <span class="n">fm</span> <span class="n">xm</span> <span class="o">-&gt;</span> <span class="kr">do</span>
    <span class="n">f</span> <span class="o">&lt;-</span> <span class="n">eval</span> <span class="n">gfi</span> <span class="n">fm</span>
    <span class="n">x</span> <span class="o">&lt;-</span> <span class="n">eval</span> <span class="n">gfi</span> <span class="n">xm</span>
    <span class="n">pure</span> <span class="p">(</span><span class="n">f</span> <span class="o">&lt;*&gt;</span> <span class="n">x</span><span class="p">)</span>
    
<span class="n">evalField</span> <span class="o">::</span> <span class="kt">FormInputs</span> <span class="o">-&gt;</span> <span class="kt">Field</span> <span class="n">a</span> <span class="o">-&gt;</span> <span class="kt">Result</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="n">a</span>
<span class="n">evalField</span> <span class="n">gfi</span> <span class="o">=</span> <span class="nf">\</span><span class="kr">case</span>
  <span class="kt">Switch</span> <span class="n">n</span>  <span class="o">-&gt;</span>
    <span class="kr">case</span> <span class="n">lookupFormInput</span> <span class="n">n</span> <span class="n">gfi</span> <span class="kr">of</span>
      <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="n">pure</span> <span class="kt">False</span>  <span class="c1">-- default to False</span>
      <span class="kt">Just</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="kr">if</span> <span class="n">v</span> <span class="o">==</span> <span class="n">'true'</span> <span class="kr">then</span> <span class="n">pure</span> <span class="kt">True</span>
        <span class="kr">else</span> <span class="kr">if</span> <span class="n">v</span> <span class="o">==</span> <span class="n">'false'</span> <span class="kr">then</span> <span class="n">pure</span> <span class="kt">False</span>
        <span class="kr">else</span>
        <span class="kr">let</span> <span class="n">err</span> <span class="o">=</span> <span class="n">unwords</span> <span class="p">[</span><span class="s">"switch '"</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="s">"' : unexpected value"</span><span class="p">,</span> <span class="n">v</span><span class="p">]</span>
            <span class="kr">in</span> <span class="kt">Error</span> <span class="p">[</span><span class="n">err</span><span class="p">]</span></code></pre></figure>

<p>And that’s it !</p>

<h2 id="conclusion">Conclusion</h2>

<p>Hopefully this post managed to convey the power and practicality of the Applicative interface.</p>

<p>The ideas presented here are already consolidated into production-grade libraries, e.g. the <code class="language-plaintext highlighter-rouge">digestive-functors</code> suite, which comes with adapters for various web frameworks.</p>

<h2 id="references">References</h2>

<p>McBride, C. and Paterson, R., Idioms: applicative programming with effects https://personal.cis.strath.ac.uk/conor.mcbride/Idiom.pdf</p>

<p>https://hackage.haskell.org/package/base-4.16.0.0/docs/Control-Applicative.html#t:Applicative</p>

<p>Cooper, E. et al., An idiom’s guide to formlets, 2007 https://homepages.inf.ed.ac.uk/wadler/papers/formlets/formlets.pdf</p>

<p>Van der Jeugt, J. <code class="language-plaintext highlighter-rouge">digestive-functors</code>, https://hackage.haskell.org/package/digestive-functors</p>
:ET