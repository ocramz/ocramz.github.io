I"™i<h2 id="introduction">Introduction</h2>

<p><a href="https://www.haskell.org/ghc/">GHC</a> is a wonderful <del>compiler</del> platform for writing compilers and languages on. In addition to Haskell offering convenient syntactic abstractions for writing domain-specific languages with, the language itself and the internals of the compiler can be extended in many ways, which let users come up with mind-bending innovations in <a href="http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf">scientific computing</a>, <a href="https://hackage.haskell.org/package/inspection-testing">testing</a> and <a href="https://haskellwingman.dev/">code editing</a>, among many other examples.</p>

<p>The compiler offers a <a href="https://downloads.haskell.org/ghc/latest/docs/html/users_guide/extending_ghc.html#compiler-plugins">plugin system</a> that lets users customize various aspects of the syntax analysis, typechecking and compilation phases, without having to rebuild the compiler itself.</p>

<p>While writing a GHC plugin that lets the user analyze and transform the Core representation of certain Haskell expressions, I found myself in need of a specific bit of machinery: how can the user <em>tell</em> the compiler which expression to look for? Moreover, how to map the names of user-defined terms to the internal representation used by the compiler?</p>

<p>It turns out <code class="language-plaintext highlighter-rouge">inspection-testing</code> provides this functionality as part of its user interface, and I will document it here both to consolidate its details in my head and so that others might learn from it in the future.</p>

<p>This post will also introduce concepts from both the <code class="language-plaintext highlighter-rouge">ghc</code> and <code class="language-plaintext highlighter-rouge">template-haskell</code> libraries as needed, so it should be useful to those who, like me, had zero experience in compiler internals until the other day.</p>

<p>Note on reproducibility : here Iâ€™m referring to GHC 9.0.1, some modules changed paths since GHC series 8. Iâ€™ve only omitted a few easy imports and definitions from <code class="language-plaintext highlighter-rouge">base</code>, which you can fill in as an exercise ;)</p>

<p>So, letâ€™s dive into the compiler !</p>

<h2 id="finding-the-name-of-declarations-with-template-haskell">Finding the <code class="language-plaintext highlighter-rouge">Name</code> of declarations with template Haskell</h2>

<p>A template-haskell <a href="https://hackage.haskell.org/package/template-haskell-2.17.0.0/docs/Language-Haskell-TH.html#t:Name"><code class="language-plaintext highlighter-rouge">Name</code></a> represents .. the name of declarations, expressions etc. in the syntax tree.</p>

<p>Resolving a top-level declaration into its <code class="language-plaintext highlighter-rouge">Name</code> requires a little bit of metaprogramming, enabled by the <code class="language-plaintext highlighter-rouge">{-# LANGUAGE TemplateHaskell #-}</code> extension. With that, we can use the special syntax with a single or double quote to refer to values or types respectively (made famous by <code class="language-plaintext highlighter-rouge">lens</code> in <a href="https://hackage.haskell.org/package/lens-5.0.1/docs/Control-Lens-Combinators.html#v:makeLenses"><code class="language-plaintext highlighter-rouge">makeLenses</code></a> â€˜â€˜Foo).</p>

<h2 id="passing-names-to-later-stages-of-the-compilation-pipeline">Passing <code class="language-plaintext highlighter-rouge">Name</code>s to later stages of the compilation pipeline</h2>

<p>This is half of the trick: the <code class="language-plaintext highlighter-rouge">Name</code> we just found (and any other metadata that might be interesting to our plugin), is packed and serialized into a GHC <a href="http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/extending_ghc.html#source-annotations">ANNotation</a> via <a href="https://hackage.haskell.org/package/template-haskell-2.17.0.0/docs/Language-Haskell-TH-Syntax.html#v:liftData"><code class="language-plaintext highlighter-rouge">liftData</code></a>, which is inserted as a new top-level declaration by a template Haskell action (i.e. a function that returns in the <code class="language-plaintext highlighter-rouge">Q</code> monad).</p>

<p>Annotations can also be attached by the user to declarations, types and modules, but this method does so programmatically.</p>

<p>The resulting function has a type signature similar to this : <code class="language-plaintext highlighter-rouge">Name -&gt; Q [Dec]</code>, i.e. given a <code class="language-plaintext highlighter-rouge">Name</code> it will produce a list of new declarations <code class="language-plaintext highlighter-rouge">Dec</code> at compile time.</p>

<p>If weâ€™re only interested in attaching a <code class="language-plaintext highlighter-rouge">Name</code> to the annotation, we just need :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="cp">{-# language DeriveDataTypeable #-}</span>
<span class="kr">import</span> <span class="nn">Data.Data</span> <span class="p">(</span><span class="kt">Data</span><span class="p">)</span>
<span class="kr">import</span> <span class="nn">Language.Haskell.TH</span> <span class="p">(</span><span class="kt">Name</span><span class="p">,</span> <span class="kt">Loc</span><span class="p">,</span> <span class="kt">AnnTarget</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="kt">Pragma</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="kt">Dec</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="nf">location</span><span class="p">,</span> <span class="kt">Q</span><span class="p">,</span> <span class="kt">Exp</span><span class="p">(</span><span class="o">..</span><span class="p">))</span>
<span class="kr">import</span> <span class="nn">Language.Haskell.TH.Syntax</span> <span class="p">(</span><span class="nf">liftData</span><span class="p">)</span>

<span class="c1">-- our annotation payload type</span>
<span class="kr">data</span> <span class="kt">Target</span> <span class="o">=</span> <span class="kt">MkTarget</span> <span class="p">{</span> <span class="n">tgName</span> <span class="o">::</span> <span class="kt">Name</span> <span class="p">}</span> <span class="kr">deriving</span> <span class="p">(</span><span class="kt">Data</span><span class="p">)</span>

<span class="n">inspect</span> <span class="o">::</span> <span class="kt">Name</span> <span class="o">-&gt;</span> <span class="kt">Q</span> <span class="p">[</span><span class="kt">Dec</span><span class="p">]</span>
<span class="n">inspect</span> <span class="n">n</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">annExpr</span> <span class="o">&lt;-</span> <span class="n">liftData</span> <span class="p">(</span><span class="kt">MkTarget</span> <span class="n">n</span><span class="p">)</span>
  <span class="n">pure</span> <span class="p">[</span><span class="kt">PragmaD</span> <span class="p">(</span><span class="kt">AnnP</span> <span class="kt">ModuleAnnotation</span> <span class="n">annExpr</span><span class="p">)]</span></code></pre></figure>

<h2 id="picking-out-our-annotation-from-within-the-plugin">Picking out our annotation from within the plugin</h2>

<p>The other half of the trick takes place within the plugin, so weâ€™ll need to import a bunch of modules from <code class="language-plaintext highlighter-rouge">ghc</code>-the-library :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="c1">-- ghc</span>
<span class="kr">import</span> <span class="nn">GHC.Plugins</span> <span class="p">(</span><span class="kt">Plugin</span><span class="p">,</span> <span class="nf">defaultPlugin</span><span class="p">,</span> <span class="kt">CorePlugin</span><span class="p">,</span> <span class="nf">installCoreToDos</span><span class="p">,</span> <span class="nf">pluginRecompile</span><span class="p">,</span> <span class="kt">CommandLineOption</span><span class="p">,</span> <span class="nf">fromSerialized</span><span class="p">,</span> <span class="nf">deserializeWithData</span><span class="p">,</span> <span class="kt">ModGuts</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="kt">Name</span><span class="p">,</span> <span class="kt">CoreExpr</span><span class="p">,</span> <span class="kt">Var</span><span class="p">,</span> <span class="nf">flattenBinds</span><span class="p">,</span> <span class="nf">getName</span><span class="p">,</span> <span class="nf">thNameToGhcName</span><span class="p">,</span> <span class="kt">PluginRecompile</span><span class="p">(</span><span class="o">..</span><span class="p">))</span>
<span class="kr">import</span> <span class="nn">GHC.Core.Opt.Monad</span> <span class="p">(</span><span class="kt">CoreToDo</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="kt">CorePluginPass</span><span class="p">,</span> <span class="nf">bindsOnlyPass</span><span class="p">,</span> <span class="kt">CoreM</span><span class="p">,</span> <span class="nf">putMsgS</span><span class="p">,</span> <span class="nf">getDynFlags</span><span class="p">,</span> <span class="nf">errorMsg</span><span class="p">)</span>
<span class="kr">import</span> <span class="nn">GHC.Core</span> <span class="p">(</span><span class="kt">CoreProgram</span><span class="p">,</span> <span class="kt">CoreBind</span><span class="p">,</span> <span class="kt">Bind</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="kt">Expr</span><span class="p">(</span><span class="o">..</span><span class="p">))</span>
<span class="kr">import</span> <span class="nn">GHC.Types.Annotations</span> <span class="p">(</span><span class="kt">Annotation</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="kt">AnnTarget</span><span class="p">(</span><span class="o">..</span><span class="p">))</span>
<span class="kr">import</span> <span class="nn">GHC.Utils.Outputable</span> <span class="p">(</span><span class="kt">Outputable</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="kt">SDoc</span><span class="p">,</span> <span class="nf">showSDoc</span><span class="p">,</span> <span class="p">(</span><span class="o">&lt;+&gt;</span><span class="p">),</span> <span class="nf">ppr</span><span class="p">,</span> <span class="nf">text</span><span class="p">)</span>
<span class="c1">-- template-haskell</span>
<span class="kr">import</span> <span class="k">qualified</span> <span class="nn">Language.Haskell.TH.Syntax</span> <span class="k">as</span> <span class="n">TH</span> <span class="p">(</span><span class="kt">Name</span><span class="p">)</span></code></pre></figure>

<p>First, we need a function that looks up all the annotations from the module internals (aptly named <code class="language-plaintext highlighter-rouge">ModGuts</code> in ghc) and attempts to decode them via their Data interface. Here we are using a custom <code class="language-plaintext highlighter-rouge">Target</code> type defined above, which could carry additional metadata.</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">extractTargets</span> <span class="o">::</span> <span class="kt">ModGuts</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">ModGuts</span><span class="p">,</span> <span class="p">[</span><span class="kt">Target</span><span class="p">])</span>
<span class="n">extractTargets</span> <span class="n">guts</span> <span class="o">=</span> <span class="p">(</span><span class="n">guts'</span><span class="p">,</span> <span class="n">xs</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="p">(</span><span class="n">anns_clean</span><span class="p">,</span> <span class="n">xs</span><span class="p">)</span> <span class="o">=</span> <span class="n">partitionMaybe</span> <span class="n">findTargetAnn</span> <span class="p">(</span><span class="n">mg_anns</span> <span class="n">guts</span><span class="p">)</span>
    <span class="n">guts'</span> <span class="o">=</span> <span class="n">guts</span> <span class="p">{</span> <span class="n">mg_anns</span> <span class="o">=</span> <span class="n">anns_clean</span> <span class="p">}</span>
    <span class="n">findTargetAnn</span> <span class="o">=</span> <span class="nf">\</span><span class="kr">case</span> 
      <span class="p">(</span><span class="kt">Annotation</span> <span class="kr">_</span> <span class="n">payload</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fromSerialized</span> <span class="n">deserializeWithData</span> <span class="n">payload</span>
      <span class="kr">_</span> <span class="o">-&gt;</span> <span class="kt">Nothing</span></code></pre></figure>

<p>Next, we need to map <code class="language-plaintext highlighter-rouge">template-haskell</code> names to the internal GHC namespace, <code class="language-plaintext highlighter-rouge">thNameToGhcName</code> to the rescue :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">fromTHName</span> <span class="o">::</span> <span class="kt">TH</span><span class="o">.</span><span class="kt">Name</span> <span class="o">-&gt;</span> <span class="kt">CoreM</span> <span class="kt">Name</span>
<span class="n">fromTHName</span> <span class="n">thn</span> <span class="o">=</span> <span class="n">thNameToGhcName</span> <span class="n">thn</span> <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="kr">case</span>
    <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="n">errorMsg</span> <span class="o">$</span> <span class="n">text</span> <span class="s">"Could not resolve TH name"</span> <span class="o">&lt;+&gt;</span> <span class="n">text</span> <span class="p">(</span><span class="n">show</span> <span class="n">thn</span><span class="p">)</span>
        <span class="n">liftIO</span> <span class="o">$</span> <span class="n">exitFailure</span> <span class="c1">-- kill the compiler. Is there a nicer way?</span>
    <span class="kt">Just</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">return</span> <span class="n">n</span></code></pre></figure>

<h2 id="a-custom-ghc-core-plugin">A custom GHC Core plugin</h2>

<p>Here we are interested in the compiler phase that produces Core IR, so weâ€™ll have to modify the <code class="language-plaintext highlighter-rouge">defaultPlugin</code> value provided by <code class="language-plaintext highlighter-rouge">ghc</code> by passing a custom implementation of <code class="language-plaintext highlighter-rouge">installCoreToDos</code> :</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="n">plugin</span> <span class="o">::</span> <span class="kt">Plugin</span>
<span class="n">plugin</span> <span class="o">=</span> <span class="n">defaultPlugin</span> <span class="p">{</span>
  <span class="n">installCoreToDos</span> <span class="o">=</span> <span class="n">install</span> <span class="c1">-- see below</span>
  <span class="p">,</span> <span class="n">pluginRecompile</span> <span class="o">=</span> <span class="nf">\</span><span class="kr">_</span> <span class="o">-&gt;</span> <span class="n">pure</span> <span class="kt">NoForceRecompile</span>
                       <span class="p">}</span></code></pre></figure>

<p>As a minimal example, letâ€™s pretty-print the Core expression corresponding to the <code class="language-plaintext highlighter-rouge">Name</code> we just found:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="c1">-- Print the Core representation of the expression that has the given Name</span>
<span class="n">printCore</span> <span class="o">::</span> <span class="kt">ModGuts</span> <span class="o">-&gt;</span> <span class="kt">TH</span><span class="o">.</span><span class="kt">Name</span> <span class="o">-&gt;</span> <span class="kt">CoreM</span> <span class="nb">()</span>
<span class="n">printCore</span> <span class="n">guts</span> <span class="n">thn</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="n">n</span> <span class="o">&lt;-</span> <span class="n">fromTHName</span> <span class="n">thn</span>
  <span class="kr">case</span> <span class="n">lookupNameInGuts</span> <span class="n">guts</span> <span class="n">n</span> <span class="kr">of</span>
    <span class="kt">Just</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span> <span class="n">coreexpr</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">do</span>
      <span class="n">dflags</span> <span class="o">&lt;-</span> <span class="n">getDynFlags</span>
      <span class="n">putMsgS</span> <span class="o">$</span> <span class="n">showSDoc</span> <span class="n">dflags</span> <span class="p">(</span><span class="n">ppr</span> <span class="n">coreexpr</span><span class="p">)</span>
    <span class="kt">Nothing</span> <span class="o">-&gt;</span> <span class="kr">do</span>
      <span class="n">errorMsg</span> <span class="o">$</span> <span class="n">text</span> <span class="s">"Cannot find name"</span> <span class="o">&lt;+&gt;</span> <span class="n">text</span> <span class="p">(</span><span class="n">show</span> <span class="n">thn</span><span class="p">)</span>
      
<span class="c1">-- Look up the given GHC 'Name' within the list of binders in the module guts</span>
<span class="n">lookupNameInGuts</span> <span class="o">::</span> <span class="kt">ModGuts</span> <span class="o">-&gt;</span> <span class="kt">Name</span> <span class="o">-&gt;</span> <span class="kt">Maybe</span> <span class="p">(</span><span class="kt">Var</span><span class="p">,</span> <span class="kt">CoreExpr</span><span class="p">)</span>
<span class="n">lookupNameInGuts</span> <span class="n">guts</span> <span class="n">n</span> <span class="o">=</span> <span class="n">listToMaybe</span>
    <span class="p">[</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">e</span><span class="p">)</span>
    <span class="o">|</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">e</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="n">flattenBinds</span> <span class="p">(</span><span class="n">mg_binds</span> <span class="n">guts</span><span class="p">)</span>
    <span class="p">,</span> <span class="n">getName</span> <span class="n">v</span> <span class="o">==</span> <span class="n">n</span>
    <span class="p">]</span></code></pre></figure>

<p>And thatâ€™s it! All thatâ€™s left is to package <code class="language-plaintext highlighter-rouge">printCore</code> into a plugin pass called <code class="language-plaintext highlighter-rouge">install</code>:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="c1">-- append a 'CoreDoPluginPass' at the _end_ of the 'CoreToDo' list</span>
<span class="n">install</span> <span class="o">::</span> <span class="p">[</span><span class="kt">CommandLineOption</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">CoreToDo</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="kt">CoreM</span> <span class="p">[</span><span class="kt">CoreToDo</span><span class="p">]</span>
<span class="n">install</span> <span class="kr">_</span> <span class="n">todos</span> <span class="o">=</span> <span class="n">pure</span> <span class="p">(</span><span class="n">todos</span> <span class="o">++</span> <span class="p">[</span><span class="n">pass</span><span class="p">])</span>
  <span class="kr">where</span>
    <span class="n">pass</span> <span class="o">=</span> <span class="kt">CoreDoPluginPass</span> <span class="n">pname</span> <span class="o">$</span> <span class="nf">\</span> <span class="n">guts</span> <span class="o">-&gt;</span> <span class="kr">do</span>
      <span class="kr">let</span> <span class="p">(</span><span class="n">guts'</span><span class="p">,</span> <span class="n">targets</span><span class="p">)</span> <span class="o">=</span> <span class="n">extractTargets</span> <span class="n">guts</span>
      <span class="n">traverse_</span> <span class="p">(</span><span class="nf">\</span><span class="p">(</span><span class="kr">_</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">printCore</span> <span class="n">guts'</span> <span class="p">(</span><span class="n">tgName</span> <span class="n">t</span><span class="p">))</span> <span class="n">targets</span>
      <span class="n">pure</span> <span class="n">guts'</span>
    <span class="n">pname</span> <span class="o">=</span> <span class="s">"My-plugin"</span></code></pre></figure>

<p>Here itâ€™s important to stress that <code class="language-plaintext highlighter-rouge">install</code> <em>appends</em> our plugin pass to the ones received as input from the upstream compilation pipeline.</p>

<h2 id="trying-out-our-plugin">Trying out our plugin</h2>

<p>A GHC plugin can be imported as any other Haskell library in the <code class="language-plaintext highlighter-rouge">build-depends</code> section of the Cabal file. While developing a plugin, one should ensure that the test <code class="language-plaintext highlighter-rouge">hs-srcs-dirs</code> directory is distinct from that under which the plugin source is defined, so as not to form an import loop.</p>

<p>With this, we can declare a minimal module that imports the TH helper <code class="language-plaintext highlighter-rouge">inspect</code> and the plugin as well:</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="cp">{-# LANGUAGE TemplateHaskell #-}</span>
<span class="cp">{-# OPTIONS_GHC -fplugin=Numeric.AD.Plugin #-}</span>

<span class="c1">-- try with both type signatures for extra fun</span>

<span class="n">f</span> <span class="o">::</span> <span class="kt">Double</span> <span class="o">-&gt;</span> <span class="kt">Double</span> <span class="o">-&gt;</span> <span class="kt">Double</span>
<span class="c1">-- f :: Floating a =&gt; a -&gt; a -&gt; a </span>
<span class="n">f</span> <span class="o">=</span> <span class="nf">\</span><span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">sqrt</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

<span class="n">inspect</span> <span class="n">'f</span></code></pre></figure>

<p>The output of our custom compiler pass will be interleaved to the rest of the GHC output as part of a clean recompile (e.g. <code class="language-plaintext highlighter-rouge">stack clean &amp;&amp; stack build</code>):</p>

<figure class="highlight"><pre><code class="language-haskell" data-lang="haskell"><span class="p">[</span><span class="mi">1</span> <span class="kr">of</span> <span class="mi">2</span><span class="p">]</span> <span class="kt">Compiling</span> <span class="kt">Main</span>
<span class="p">[</span><span class="mi">2</span> <span class="kr">of</span> <span class="mi">2</span><span class="p">]</span> <span class="kt">Compiling</span> <span class="kt">PluginTest</span>
<span class="nf">\</span> <span class="p">(</span><span class="n">x</span> <span class="p">[</span><span class="kt">Dmd</span><span class="o">=&lt;</span><span class="kt">S</span><span class="p">,</span><span class="mi">1</span><span class="o">*</span><span class="kt">U</span><span class="p">(</span><span class="kt">U</span><span class="p">)</span><span class="o">&gt;</span><span class="p">]</span> <span class="o">::</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span> <span class="p">[</span><span class="kt">Dmd</span><span class="o">=&lt;</span><span class="kt">S</span><span class="p">,</span><span class="mi">1</span><span class="o">*</span><span class="kt">U</span><span class="p">(</span><span class="kt">U</span><span class="p">)</span><span class="o">&gt;</span><span class="p">]</span> <span class="o">::</span> <span class="kt">Double</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="kr">case</span> <span class="n">x</span> <span class="kr">of</span> <span class="p">{</span> <span class="kt">D</span><span class="o">#</span> <span class="n">x</span> <span class="o">-&gt;</span>
  <span class="kr">case</span> <span class="n">y</span> <span class="kr">of</span> <span class="p">{</span> <span class="kt">D</span><span class="o">#</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="kt">D</span><span class="o">#</span> <span class="p">(</span><span class="o">+##</span> <span class="p">(</span><span class="n">sqrtDouble</span><span class="o">#</span> <span class="n">x</span><span class="p">)</span> <span class="n">y</span><span class="p">)</span> <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<h2 id="credits">Credits</h2>

<p>First and foremost a big shout out to all the contributors to GHC who have built a truly remarkable piece of technology we can all enjoy, learn from and be productive with.</p>

<p>Of course, Joachim Breitner for <code class="language-plaintext highlighter-rouge">inspection-testing</code> [1]. I still remember the distinct feeling of my brain expanding against my skull after seeing his presentation on this at Zurihac 2017.</p>

<p>Next, Iâ€™d like to thank the good folks in the Haskell community for kindly giving exhaustive answers to my questions on r/haskell, the ZuriHac discord server and stackoverflow. Li-yao Xia, Matthew Pickering, Daniel Diaz, David Feuer and others. Matthew has also written a paper [2] and curated a list of references on GHC plugins , which I refer to extensively.</p>

<p>Mark Karpov deserves lots of credit too for writing an excellent reference on template Haskell [3] with lots of worked examples, go and check it out.</p>

<h2 id="references">References</h2>

<p>0) <a href="https://gitlab.haskell.org/ghc/ghc/-/wikis/annotations">GHC annotations</a></p>

<p>1) J. Breitner, <a href="https://github.com/nomeata/inspection-testing"><code class="language-plaintext highlighter-rouge">inspection-testing</code></a></p>

<p>2) M. Pickering et al, <a href="https://mpickering.github.io/papers/working-with-source-plugins.pdf">Working with source plugins</a></p>

<p>3) M. Karpov, <a href="https://markkarpov.com/tutorial/th.html">Template Haskell tutorial</a></p>
:ET